
Start analyze function: DividendDistributor.distributeDividend(address)
Function Security Analysis for DividendDistributor.distributeDividend(address)
    There are no modifiers should be examined in function distributeDividend.
    Check direct function security
        - function DividendDistributor.distributeDividend(address) has no security assurance protected by checking the authority of msg.sender
          Reason: The function does not contain any of the specified structures that manage msg.sender restrictions or checks against specific roles like
          xxxOwner/xxxAddress/Leader/CEO.
        - function DividendDistributor.distributeDividend(address) has no apparent security assurance by utilizing a lock machinism.
          Reason: The code does not contain any of the specified structure such as a 'require' statement or 'if' statement that throws, followed by assignments to the
          same boolean variable changing its value. It only contains conditional checks for amounts and distribution logic.
    Since the function can only be called by functions, we start to analyze indirect function security.
    The reachable functions are ['claimDividend', 'process', 'setShare']
        Function Security Analysis for DividendDistributor.claimDividend()
            There are no modifiers should be examined in function claimDividend.
            Check direct function security
                - function DividendDistributor.claimDividend() has no security assurance protected by checking the authority of msg.sender
                  Reason: The function does not contain any of the specified structures for checking if `msg.sender` is the owner or has a specific required address.
                - function DividendDistributor.claimDividend() has no apparent security assurance by utilizing a lock machinism.
                  Reason: The code does not contain any of the specified structures. It only calls a function 'distributeDividend' with 'msg.sender' as an argument.
External Call Analysis
    Direct external call: ['POOF.transfer(shareholder,amount)']
    Analyze Transfer
        - POOF.transfer(shareholder,amount) ISN'T subjected to gas limits. Parameter in 'transfer'/'send': 2.
    Analyze Gas
        - POOF.transfer(shareholder,amount) ISN'T subjected to gas limits.
    Remaining external call: ['POOF.transfer(shareholder,amount)']
    Analyze External Address
        There are ['POOF'] should be checked in variable POOF
        Checked variables: POOF
            State variable POOF has initialized in public area after declaration.
Conclusion: This function will not cause REE Problem.
