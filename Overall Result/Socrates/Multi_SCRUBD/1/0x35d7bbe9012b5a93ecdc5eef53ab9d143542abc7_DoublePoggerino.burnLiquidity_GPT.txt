
Start analyze function: DoublePoggerino.burnLiquidity()
Function Security Analysis for DoublePoggerino.burnLiquidity()
    There are no modifiers should be examined in function burnLiquidity.
    Check direct function security
        - function DoublePoggerino.burnLiquidity() has no security assurance protected by checking the authority of msg.sender
          Reason: The code does not contain any of the specified conditions that check or assert actions based on msg.sender being a specific owner or address.
        - function DoublePoggerino.burnLiquidity() has no apparent security assurance by utilizing a lock machinism.
          Reason: The given function does not contain any of the specified structures. There is a require statement, but it is checking if the balance is not equal to 0,
          which does not match any of the conditions provided (e.g., require(xxx == True), require(xxx == False), or require(!xxx)). Additionally, there is no alteration
          of a state variable after the require statement that matches the listed patterns.
External Call Analysis
    Direct external call: ['ERC20(uniswapV2Pair).transfer(address(0),balance)']
    Analyze Transfer
        - ERC20(uniswapV2Pair).transfer(address(0),balance) ISN'T subjected to gas limits. Parameter in 'transfer'/'send': 2.
    Analyze Gas
        - ERC20(uniswapV2Pair).transfer(address(0),balance) ISN'T subjected to gas limits.
    Remaining external call: ['ERC20(uniswapV2Pair).transfer(address(0),balance)']
    Analyze External Address
        There are ['uniswapV2Pair'] should be checked in variable uniswapV2Pair
        Checked variables: uniswapV2Pair
        There are no function that assign and initialize this variable. Please further manually check on successor contracts or modifiers.
Conclusion: This function will not cause REE Problem.
