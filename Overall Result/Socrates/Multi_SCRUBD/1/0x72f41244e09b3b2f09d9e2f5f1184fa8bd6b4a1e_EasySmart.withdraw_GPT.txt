
Start analyze function: EasySmart.withdraw()
Function Security Analysis for EasySmart.withdraw()
    There are no modifiers should be examined in function withdraw.
    Check direct function security
        - function EasySmart.withdraw() has no security assurance protected by checking the authority of msg.sender
          Reason: The code does not contain any 'require', 'if', or 'assert' statements with conditions based on 'msg.sender' being compared to variables like 'xxxOwner',
          'xxxAddress', 'Leader', 'CEO'.
        - function EasySmart.withdraw() has no apparent security assurance by utilizing a lock machinism.
          Reason: The code does not contain any structures like 'require(xxx == True); xxx = False;' or 'require(xxx == False); xxx = True;','require(!xxx); xxx = True;'
          or 'if(!xxx) throw; xxx = true;'. The requires present are unrelated to these structures and do not manipulate the variable 'xxx'.
    Since the function can only be called by functions, we start to analyze indirect function security.
    The reachable functions are ['fallback']
        Function Security Analysis for EasySmart.fallback()
            There are no modifiers should be examined in function fallback.
            Check direct function security
                - function EasySmart.fallback() has no security assurance protected by checking the authority of msg.sender
                  Reason: The function does not contain any of the specified structures related to checking msg.sender against any specific roles such as Owner, Address,
                  Leader, or CEO.
                - function EasySmart.fallback() has no apparent security assurance by utilizing a lock machinism.
                  Reason: The provided code does not have any of the required structures. There is no use of 'require' or use of '!xxx' with 'throw'. Also, there is no
                  explicit setting of a variable to true or false based on any conditions in the provided function.
External Call Analysis
    Direct external call: ['sender.send(amount)']
    Analyze Transfer
        - sender.send(amount) is subjected to gas limits. Therefore, it has no potential REE problem. Here is the reason: The external call contains the keyword '.send('.
        Thus, it satisfies one of the characteristics.. Parameter in 'transfer'/'send': 1.
    Analyze Gas
    Remaining external call: []
    No more external call should be analyzed.
Conclusion: This function will not cause REE Problem.
