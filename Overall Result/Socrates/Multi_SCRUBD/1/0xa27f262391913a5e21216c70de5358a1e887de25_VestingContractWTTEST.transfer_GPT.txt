
Start analyze function: VestingContractWTTEST.transfer(address,uint256)
Function Security Analysis for VestingContractWTTEST.transfer(address,uint256)
    There are no modifiers should be examined in function transfer.
    Check direct function security
        - function VestingContractWTTEST.transfer(address,uint256) has no security assurance protected by checking the authority of msg.sender
          Reason: The provided code does not contain any check against `msg.sender` to verify if it equals xxxOwner/xxxAddress/Leader/CEO using require, if statements, or
          assert.
        - function VestingContractWTTEST.transfer(address,uint256) has no apparent security assurance by utilizing a lock machinism.
          Reason: The code doesn't contain any statements or structure that matches the described patterns. There is no instance of requiring a variable to be true or
          false and then changing its value, nor checking if a variable is false and then changing its value.
External Call Analysis
    Direct external call: ['we_test_token.transfer(to,value)', 'we_test_token.balanceOf(this)']
    Analyze Transfer
        - we_test_token.transfer(to,value) ISN'T subjected to gas limits. Parameter in 'transfer'/'send': 2.
    Analyze Gas
        - we_test_token.transfer(to,value) ISN'T subjected to gas limits.
        - we_test_token.balanceOf(this) ISN'T subjected to gas limits.
    Remaining external call: ['we_test_token.transfer(to,value)', 'we_test_token.balanceOf(this)']
    Analyze External Address
        There are ['we_test_token'] should be checked in variable we_test_token
        Checked variables: we_test_token
            Yes The provided code contains a function named 'VestingContractWTTEST', which matches the contract name 'VestingContractWTTEST'. According to Solidity
            conventions in earlier versions of Solidity prior to 0.4.22 (when explicit constructors were introduced), such a matching function name indicates it is a
            constructor.
        There are ['we_test_token'] should be checked in variable we_test_token
        Checked variables: we_test_token
            Yes The provided code includes a function named 'VestingContractWTTEST', which matches the name of the contract 'VestingContractWTTEST'. This indicates that
            the function is a constructor since it shares the same name as the contract. Constructors do not require an explicit 'constructor' keyword in older versions
            of Solidity, and that matches condition 1: the function is a constructor.
Conclusion: This function will not cause REE Problem.
