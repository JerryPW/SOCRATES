
Start analyze function: BDSM_Crowdsale.fallback()
Function Security Analysis for BDSM_Crowdsale.fallback()
    There are no modifiers should be examined in function fallback.
    Check direct function security
        - function BDSM_Crowdsale.fallback() has no security assurance protected by checking the authority of msg.sender
          Reason: The code does not contain any condition that checks if `msg.sender` is an owner or specific address such as xxxOwner, xxxAddress, Leader, or CEO as per
          the listed conditions.
        - function BDSM_Crowdsale.fallback() has no apparent security assurance by utilizing a lock machinism.
          Reason: The code structure partially matches characteristic 3 with the `if(!tokensWithdrawn)` and `tokensWithdrawn = true;` statements. However, these
          statements do not occur immediately. There is logic in between these parts, which impacts the flow, and the state change is dependent on a prior condition (`if
          (now > stopICO_20_March)`). Therefore, it does not satisfy the requirement that the negation must occur before the function's main logic.
External Call Analysis
    Direct external call: ['sharesTokenAddress.balanceOf(this)', 'sharesTokenAddress.transfer(msg.sender,tokenFree)', 'msg.sender.transfer(msg.value-sendETH)',
    'owner.transfer(actualETHTransfer)', 'sharesTokenAddress.transfer(msg.sender,tokenToBuy)', 'msg.sender.transfer(msg.value-actualETHTransfer)',
    'owner.transfer(sendETH)', 'msg.sender.transfer(msg.value)', 'sharesTokenAddress.transfer(safeContract,sharesTokenAddress.balanceOf(this))']
    Analyze Transfer
        - sharesTokenAddress.transfer(msg.sender,tokenFree) ISN'T subjected to gas limits. Parameter in 'transfer'/'send': 2.
        - msg.sender.transfer(msg.value-sendETH) is subjected to gas limits. Therefore, it has no potential REE problem. Here is the reason: The call
        'msg.sender.transfer(msg.value-sendETH)' contains '.transfer('.. Parameter in 'transfer'/'send': 1.
        - owner.transfer(actualETHTransfer) is subjected to gas limits. Therefore, it has no potential REE problem. Here is the reason: The call
        'owner.transfer(actualETHTransfer)' contains '.transfer('.. Parameter in 'transfer'/'send': 1.
        - sharesTokenAddress.transfer(msg.sender,tokenToBuy) ISN'T subjected to gas limits. Parameter in 'transfer'/'send': 2.
        - msg.sender.transfer(msg.value-actualETHTransfer) is subjected to gas limits. Therefore, it has no potential REE problem. Here is the reason: The call
        'msg.sender.transfer(msg.value-actualETHTransfer)' contains '.transfer('.. Parameter in 'transfer'/'send': 1.
        - owner.transfer(sendETH) is subjected to gas limits. Therefore, it has no potential REE problem. Here is the reason: The call 'owner.transfer(sendETH)' contains
        '.transfer('.. Parameter in 'transfer'/'send': 1.
        - msg.sender.transfer(msg.value) is subjected to gas limits. Therefore, it has no potential REE problem. Here is the reason: The call
        'msg.sender.transfer(msg.value)' contains '.transfer('.. Parameter in 'transfer'/'send': 1.
        - sharesTokenAddress.transfer(safeContract,sharesTokenAddress.balanceOf(this)) ISN'T subjected to gas limits. Parameter in 'transfer'/'send': 2.
    Analyze Gas
        - sharesTokenAddress.balanceOf(this) ISN'T subjected to gas limits.
        - sharesTokenAddress.transfer(msg.sender,tokenFree) ISN'T subjected to gas limits.
        - sharesTokenAddress.transfer(msg.sender,tokenToBuy) ISN'T subjected to gas limits.
        - sharesTokenAddress.transfer(safeContract,sharesTokenAddress.balanceOf(this)) ISN'T subjected to gas limits.
    Remaining external call: ['sharesTokenAddress.balanceOf(this)', 'sharesTokenAddress.transfer(msg.sender,tokenFree)',
    'sharesTokenAddress.transfer(msg.sender,tokenToBuy)', 'sharesTokenAddress.transfer(safeContract,sharesTokenAddress.balanceOf(this))']
    Analyze External Address
        There are ['sharesTokenAddress'] should be checked in variable sharesTokenAddress
        Checked variables: sharesTokenAddress
            Yes The function is named 'BDSM_Crowdsale', which matches the contract name, indicating that it is a constructor. Constructors are typically identified when
            the function name matches the contract name, satisfying the first characteristic.
        There are ['sharesTokenAddress'] should be checked in variable sharesTokenAddress
        Checked variables: sharesTokenAddress
            Yes 1. The function name 'BDSM_Crowdsale' matches the contract name 'BDSM_Crowdsale', indicating it is a constructor.  2. The function modifies the state
            variable 'sharesTokenAddress', by assigning a value to it using the function call 'token(_tokenAddress)', but it is not hardcoded.  Therefore, the function
            satisfies the first characteristic of being a constructor.
        There are ['sharesTokenAddress'] should be checked in variable sharesTokenAddress
        Checked variables: sharesTokenAddress
            Yes 1. The function is named 'BDSM_Crowdsale', and the contract name is also 'BDSM_Crowdsale'. This indicates that the function is a constructor of the
            contract. 2. The state variable 'sharesTokenAddress' is not hardcoded in this function; it is assigned by the parameter '_tokenAddress'.
        There are ['sharesTokenAddress'] should be checked in variable sharesTokenAddress
        Checked variables: sharesTokenAddress
            Yes The function provided is a constructor because its name matches the name of the contract (BDSM_Crowdsale).
Conclusion: This function will not cause REE Problem.
