
Start analyze function: DoublePoggerino.burnLiquidity()
Function Security Analysis for DoublePoggerino.burnLiquidity()
    There are no modifiers should be examined in function burnLiquidity.
    Check direct function security
        - function DoublePoggerino.burnLiquidity() has no security assurance protected by checking the authority of msg.sender
          Reason: The code does not contain any condition that includes checking whether 'msg.sender' is equal to any specified 'Owner', 'Address', 'Leader', 'CEO', or
          any conditional structures related to 'msg.sender'. The only condition present is a check on token balance being nonzero.
        - function DoublePoggerino.burnLiquidity() has no apparent security assurance by utilizing a lock machinism.
          Reason: The code does not involve any boolean variable assignments or checks that match the specified structures with 'require(xxx == True)' or 'require(xxx ==
          False)' or similar checks. Instead, it uses 'require(balance != 0...)', which checks that the balance is not zero to proceed, without modifying a corresponding
          boolean variable that alternates between true or false around this conditional statement.
External Call Analysis
    Direct external call: ['ERC20(uniswapV2Pair).transfer(address(0),balance)']
    Analyze Transfer
        - ERC20(uniswapV2Pair).transfer(address(0),balance) ISN'T subjected to gas limits. Parameter in 'transfer'/'send': 2.
    Analyze Gas
        - ERC20(uniswapV2Pair).transfer(address(0),balance) ISN'T subjected to gas limits.
    Remaining external call: ['ERC20(uniswapV2Pair).transfer(address(0),balance)']
    Analyze External Address
        There are ['uniswapV2Pair'] should be checked in variable uniswapV2Pair
        Checked variables: uniswapV2Pair
        There are no function that assign and initialize this variable. Please further manually check on successor contracts or modifiers.
Conclusion: This function will not cause REE Problem.
