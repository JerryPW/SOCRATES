
Start analyze function: Contagion.Sort()
Function Security Analysis for Contagion.Sort()
    There are no modifiers should be examined in function Sort.
    Check direct function security
        - function Contagion.Sort() has no security assurance protected by checking the authority of msg.sender
          Reason: The function does not contain any of the specified structures involving msg.sender with xxxOwner/xxxAddress/Leader/CEO.
        - function Contagion.Sort() has no apparent security assurance by utilizing a lock machinism.
          Reason: The function does not contain any of the specified patterns like 'require(xxx == True); xxx = False;' or others listed in the criteria. It does not
          involve any 'require' statements or conditions that match the described structures.
    Since the function can only be called by functions, we start to analyze indirect function security.
    The reachable functions are ['fallback']
        Function Security Analysis for Contagion.fallback()
            There are no modifiers should be examined in function fallback.
            Check direct function security
                - function Contagion.fallback() has no security assurance protected by checking the authority of msg.sender
                  Reason: The condition 'if (msg.sender == owner)' alone does not match any of the specified structures as it doesn't involve a negation or throwing
                  mechanism with respect to the msg.sender. It also does not include other conditions with msg.sender, nor a require or assert statement checking equality
                  directly for permission control as specified.
                - function Contagion.fallback() has no apparent security assurance by utilizing a lock machinism.
                  Reason: The code does not contain any of the specified structures involving require statements or throwing conditions with subsequent variable
                  assignments and optional structures as given in the four cases.
External Call Analysis
    Direct external call: ['owner.send(feecounter)']
    Analyze Transfer
        - owner.send(feecounter) is subjected to gas limits. Therefore, it has no potential REE problem. Here is the reason: The external call contains the '.send('
        keyword.. Parameter in 'transfer'/'send': 1.
    Analyze Gas
    Remaining external call: []
    No more external call should be analyzed.
Conclusion: This function will not cause REE Problem.
