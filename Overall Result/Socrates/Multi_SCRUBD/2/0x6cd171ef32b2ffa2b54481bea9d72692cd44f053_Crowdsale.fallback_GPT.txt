
Start analyze function: Crowdsale.fallback()
Function Security Analysis for Crowdsale.fallback()
    There are no modifiers should be examined in function fallback.
    Check direct function security
        - function Crowdsale.fallback() has no security assurance protected by checking the authority of msg.sender
          Reason: The provided code snippet doesn't contain any of the specified structures involving 'msg.sender' and checking against 'xxxOwner', 'xxxAddress',
          'Leader', or 'CEO'.
        - function Crowdsale.fallback() has no apparent security assurance by utilizing a lock machinism.
          Reason: The code does not contain any of the specified structures:  1. No `require(xxx == True); xxx = False;` structure is present.  2. No `require(xxx ==
          False); xxx = True;` structure is present.  3. No `require(!xxx); xxx = True;` structure is present.  4. No `if(!xxx) throw; xxx = true;` structure is present.
          The function uses `require(tokenToBuy > 0);`, however, it does not assign `tokenToBuy` a False (or zero) or True (or non-zero) value afterward. Thus, it does
          not match the required patterns.  There are Boolean operations involving `crowdsaleClosed`, but they do not follow the specified requirements of having a
          require-xxx pair.
External Call Analysis
    Direct external call: ['sharesTokenAddress.balanceOf(this)', 'sharesTokenAddress.transfer(msg.sender,tokenFree)', 'msg.sender.transfer(msg.value-sendETH)',
    'owner.transfer(actualETHTransfer)', 'sharesTokenAddress.transfer(msg.sender,tokenToBuy)', 'msg.sender.transfer(msg.value-actualETHTransfer)',
    'owner.transfer(sendETH)', 'msg.sender.transfer(msg.value)']
    Analyze Transfer
        - sharesTokenAddress.transfer(msg.sender,tokenFree) ISN'T subjected to gas limits. Parameter in 'transfer'/'send': 2.
        - msg.sender.transfer(msg.value-sendETH) is subjected to gas limits. Therefore, it has no potential REE problem. Here is the reason: The call
        'msg.sender.transfer(msg.value-sendETH)' contains the '.transfer(' keyword.. Parameter in 'transfer'/'send': 1.
        - owner.transfer(actualETHTransfer) is subjected to gas limits. Therefore, it has no potential REE problem. Here is the reason: The call
        'owner.transfer(actualETHTransfer)' contains the '.transfer(' keyword.. Parameter in 'transfer'/'send': 1.
        - sharesTokenAddress.transfer(msg.sender,tokenToBuy) ISN'T subjected to gas limits. Parameter in 'transfer'/'send': 2.
        - msg.sender.transfer(msg.value-actualETHTransfer) is subjected to gas limits. Therefore, it has no potential REE problem. Here is the reason: The call
        'msg.sender.transfer(msg.value-actualETHTransfer)' contains the '.transfer(' keyword.. Parameter in 'transfer'/'send': 1.
        - owner.transfer(sendETH) is subjected to gas limits. Therefore, it has no potential REE problem. Here is the reason: The call 'owner.transfer(sendETH)' contains
        the '.transfer(' keyword.. Parameter in 'transfer'/'send': 1.
        - msg.sender.transfer(msg.value) is subjected to gas limits. Therefore, it has no potential REE problem. Here is the reason: The call
        'msg.sender.transfer(msg.value)' contains the '.transfer(' keyword.. Parameter in 'transfer'/'send': 1.
    Analyze Gas
        - sharesTokenAddress.balanceOf(this) ISN'T subjected to gas limits.
        - sharesTokenAddress.transfer(msg.sender,tokenFree) ISN'T subjected to gas limits.
        - sharesTokenAddress.transfer(msg.sender,tokenToBuy) ISN'T subjected to gas limits.
    Remaining external call: ['sharesTokenAddress.balanceOf(this)', 'sharesTokenAddress.transfer(msg.sender,tokenFree)',
    'sharesTokenAddress.transfer(msg.sender,tokenToBuy)']
    Analyze External Address
        There are ['sharesTokenAddress'] should be checked in variable sharesTokenAddress
        Checked variables: sharesTokenAddress
            Yes The given code is a constructor for the Crowdsale contract, as the function name matches the contract name 'Crowdsale'. According to the provided rules,
            this satisfies the first characteristic for determining if an external call is of a specific type. Additionally, the function assigns a state variable
            'sharesTokenAddress', but the address passed into it is not hardcoded, so it does not satisfy the second characteristic.
        There are ['sharesTokenAddress'] should be checked in variable sharesTokenAddress
        Checked variables: sharesTokenAddress
            Yes The function provided in the code is named 'Crowdsale', which matches the contract name 'Crowdsale'. This indicates that the function is a constructor for
            the contract, satisfying the first characteristic.
        There are ['sharesTokenAddress'] should be checked in variable sharesTokenAddress
        Checked variables: sharesTokenAddress
            Yes The provided code is a constructor because the function name 'Crowdsale' matches the contract name 'Crowdsale'.
Conclusion: This function will not cause REE Problem.
