
Start analyze function: ABIO_BaseICO.burnRestTokens()
Function Security Analysis for ABIO_BaseICO.burnRestTokens()
    The modifier of function burnRestTokens are ['afterDeadline']
    The result of checking modifiers:
        - modifier afterDeadline has no relation with controlled by owner.
          Reason: The modifier 'afterDeadline' does not enforce ownership checks or locking mechanisms explicitly in its structure, and its name does not indicate such
          functionality either.
    Check direct function security
        - function ABIO_BaseICO.burnRestTokens() has no security assurance protected by checking the authority of msg.sender
          Reason: The code does not contain any checks that explicitly involve 'msg.sender', such as a require or assert statement that checks whether 'msg.sender' is
          equal to or not equal to a specific owner or authority role.
        - function ABIO_BaseICO.burnRestTokens() has no apparent security assurance by utilizing a lock machinism.
          Reason: Upon reviewing the code, although it contains 'require(!restTokensBurned);' followed by 'restTokensBurned = true;', the state negation operation on
          'restTokensBurned' is not performed immediately after the 'require' statement. The operation 'abioToken.burnMyBalance();' takes place between the 'require' and
          state negation, thus failing to meet the specified requirements.
External Call Analysis
    Direct external call: ['abioToken.burnMyBalance()']
    Analyze Transfer
    Analyze Gas
        - abioToken.burnMyBalance() ISN'T subjected to gas limits.
    Remaining external call: ['abioToken.burnMyBalance()']
    Analyze External Address
        There are ['abioToken'] should be checked in variable abioToken
        Checked variables: abioToken
        There are no function that assign and initialize this variable. Please further manually check on successor contracts or modifiers.
Conclusion: This function will not cause REE Problem.
