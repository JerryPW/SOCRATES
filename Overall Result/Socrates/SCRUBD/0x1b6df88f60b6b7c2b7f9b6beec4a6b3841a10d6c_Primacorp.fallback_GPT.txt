
Start analyze function: Primacorp.fallback()
Function Security Analysis for Primacorp.fallback()
    There are no modifiers should be examined in function fallback.
    Check direct function security
        - function Primacorp.fallback() has no security assurance protected by checking the authority of msg.sender
          Reason: The function does not include any conditions related to checking msg.sender against an owner or specific addresses such as xxxOwner, xxxAddress, Leader,
          or CEO as specified in the structures. The require statements involve 'allowance[msg.sender]' and 'msg.value' conditions only.
        - function Primacorp.fallback() has no apparent security assurance by utilizing a lock machinism.
          Reason: The code does not follow any of the specified structures where a require or if statement is followed by changing the same variable to True or False. The
          code uses 'require' statements with 'allowance' variable but neither changes its value to a boolean nor follows the given structures.
External Call Analysis
    Direct external call: ['ERC20(_tokenAddress).transfer(msg.sender,allowance[msg.sender])']
    Analyze Transfer
        - ERC20(_tokenAddress).transfer(msg.sender,allowance[msg.sender]) ISN'T subjected to gas limits. Parameter in 'transfer'/'send': 2.
    Analyze Gas
        - ERC20(_tokenAddress).transfer(msg.sender,allowance[msg.sender]) ISN'T subjected to gas limits.
    Remaining external call: ['ERC20(_tokenAddress).transfer(msg.sender,allowance[msg.sender])']
    Analyze External Address
        There are ['_tokenAddress'] should be checked in variable _tokenAddress
        Checked variables: _tokenAddress
            State variable _tokenAddress has initialized in public area after declaration.
Conclusion: This function will not cause REE Problem.
