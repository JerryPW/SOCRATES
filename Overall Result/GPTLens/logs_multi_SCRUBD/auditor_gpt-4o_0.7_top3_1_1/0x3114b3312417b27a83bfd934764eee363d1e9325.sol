[
    {
        "function_name": "rollDice",
        "code": "function rollDice(uint[] memory betNumbers) public payable returns (bool success) {\n    bytes32 oraclizeQueryId;\n    address payable player = msg.sender;\n    uint betAmount = msg.value;\n    require(betAmount >= minimumBet);\n    require(betNumbers.length >= 1);\n    emit PlayerBetAccepted(address(this), player, betNumbers, betAmount);\n    emit RollDice(address(this), player, \"Query to random.org was sent, standing by for the answer.\");\n    if(betNumbers.length < 6) {\n        oraclizeQueryId = oraclize_query(\"URL\", \"https\");\n        oraclizeStructs[oraclizeQueryId].status = false;\n        oraclizeStructs[oraclizeQueryId].queryId = oraclizeQueryId;\n        oraclizeStructs[oraclizeQueryId].player = player;\n        oraclizeStructs[oraclizeQueryId].betNumbers = betNumbers;\n        oraclizeStructs[oraclizeQueryId].betAmount = betAmount;\n        oraclizedIndices.push(oraclizeQueryId) -1;\n        emit NumberGeneratorQuery(address(this), player, oraclizeQueryId);\n    } else {\n        msg.sender.transfer(msg.value);\n    }\n    emit AwaitingRandomOrgCallback(address(this), oraclizeQueryId);\n    return true;\n}",
        "vulnerability": "Potentially Reentrant Call",
        "reason": "The function transfers ether back to msg.sender if the condition betNumbers.length >= 6 is met, without using a reentrancy guard. If the sender is a contract, it could potentially exploit this by calling rollDice recursively within its fallback function.",
        "file_name": "0x3114b3312417b27a83bfd934764eee363d1e9325.sol"
    },
    {
        "function_name": "__callback",
        "code": "function __callback(bytes32 myid, string memory result) public payable {\n    bool playerWins;\n    uint winAmount;\n    emit RandomOrgCallback(address(this), myid);\n    address oraclize_cb = oraclize_cbAddress();\n    require(msg.sender == oraclize_cb);\n    address payable player = oraclizeStructs[myid].player;\n    emit NumberGeneratorResponse(address(this), msg.sender, myid, result);\n    uint winningNumber = parseInt(result);\n    uint[] memory betNumbers = oraclizeStructs[myid].betNumbers;\n    emit WinningNumber(address(this), myid, betNumbers, winningNumber);\n    oraclizeStructs[myid].winningNumber = winningNumber;\n    uint betAmount = oraclizeStructs[myid].betAmount;\n    for (uint i = 0; i < betNumbers.length; i++) {\n        uint betNumber = betNumbers[i];\n        if(betNumber == winningNumber) {\n            playerWins = true;\n            break;\n        }\n    }\n    if(playerWins) {\n        if(betNumbers.length == 1) {\n            winAmount = (betAmount * 589) / 100;\n        }\n        if(betNumbers.length == 2) {\n            winAmount = (betAmount * 293) / 100;\n        }\n        if(betNumbers.length == 3) {\n            winAmount = (betAmount * 195) / 100;\n        }\n        if(betNumbers.length == 4) {\n            winAmount = (betAmount * 142) / 100;\n        }\n        if(betNumbers.length == 5) {\n            winAmount = (betAmount * 107) / 100;\n        }\n        if(betNumbers.length >= 6) {\n            winAmount = 0;\n        }\n        emit PlayerWins(address(this), player, winningNumber, winAmount);\n        if(winAmount > 0) {\n            uint casino_edge = (winAmount / 100) * 4;\n            uint oraclize_fee = 4000000000000000;\n            winAmount = winAmount - casino_edge;\n            winAmount = winAmount - oraclize_fee;\n            address(player).transfer(winAmount);\n            oraclizeStructs[myid].winAmount = winAmount;\n            emit PlayerCashout(address(this), player, winningNumber, winAmount);\n        }\n    }\n    if(playerWins==false) {\n        emit DidNotWin(address(this), winningNumber, betNumbers);\n        emit GameFinalized(address(this));\n    }\n    oraclizeStructs[myid].status = true;\n}",
        "vulnerability": "Lack of Access Control",
        "reason": "The function relies solely on the sender being the Oraclize callback address to authenticate the call, which could be spoofed if the oracle service is compromised or if an attacker can simulate the callback address.",
        "file_name": "0x3114b3312417b27a83bfd934764eee363d1e9325.sol"
    },
    {
        "function_name": "payRoyalty",
        "code": "function payRoyalty() public payable returns (bool success) {\n    uint royalty = address(this).balance/2;\n    address payable trustedParty1 = 0xcdAD2D448583C1d9084F54c0d207b3eBE0398490;\n    address payable trustedParty2 = 0x7d75fa60af97284b0c4db3f5EE2AC2D3569576b1;\n    trustedParty1.transfer(royalty/2);\n    trustedParty2.transfer(royalty/2);\n    return (true);\n}",
        "vulnerability": "Arbitrary Royalty Payment",
        "reason": "This function allows any caller to trigger the payment of half the contract balance to two hard-coded addresses, potentially draining the contract's funds if called maliciously.",
        "file_name": "0x3114b3312417b27a83bfd934764eee363d1e9325.sol"
    }
]