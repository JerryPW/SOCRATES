[
    {
        "function_name": "removeERC20Token",
        "code": "function removeERC20Token( erc20Addresses storage self, address _ercTokenAddress ) internal { if (self.array.length > 1){ for (uint256 i = 0; i < self.array.length; i++) { if ( self.array[i] == _ercTokenAddress ) { delete self.array[i]; } } } else{ self.array.length = 0; } }",
        "vulnerability": "Inefficient Element Removal",
        "reason": "The function uses 'delete' to remove an element from an array, which doesn't reduce the array's length, leading to 'gaps' in the array. This can cause errors when iterating over the array or when accessing these 'empty' elements. The function should ensure elements are shifted to maintain a contiguous array.",
        "file_name": "0x03fb31bb6def4dd3a7ea3b0fa6bdecc940e75795.sol"
    },
    {
        "function_name": "putOnSale",
        "code": "function putOnSale( uint256 _tokenID, uint256 _startingPrice, uint256 _auctionType, uint256 _buyPrice, uint256 _duration, address _mintableToken, address _erc20Token ) public erc20Allowed(_erc20Token) tokenOwnerOnlly(_tokenID, _mintableToken) { IMintableToken Token = IMintableToken(_mintableToken); require( Token.getApproved(_tokenID) == address(this), \"Broker Not approved\" ); auction memory _auction = auctions[_mintableToken][_tokenID]; if (tokenOpenForSale[_mintableToken][_tokenID] == true) { require( _auction.auctionType == 2 && _auction.buyer == false && block.timestamp > _auction.closingTime, \"This NFT is already on sale.\" ); } auction memory newAuction = auction( msg.sender, _startingPrice, address(0), _auctionType, _startingPrice, _buyPrice, false, block.timestamp, block.timestamp + _duration, _erc20Token ); auctions[_mintableToken][_tokenID] = newAuction; TokenDetArrayLib.TokenDet memory _tokenDet = TokenDetArrayLib.TokenDet(_mintableToken, _tokenID); if (tokenOpenForSale[_tokenDet.NFTAddress][_tokenDet.tokenID] == false) { tokenOpenForSale[_tokenDet.NFTAddress][_tokenDet.tokenID] = true; tokensForSale.addTokenDet(_tokenDet); tokensForSalePerUser[msg.sender].addTokenDet(_tokenDet); if (_auctionType == 1) { fixedPriceTokens.addTokenDet(_tokenDet); } else if (_auctionType == 2) { auctionTokens.addTokenDet(_tokenDet); } } emit OnSale( _tokenDet.NFTAddress, _tokenDet.tokenID, msg.sender, _auctionType, newAuction.auctionType == 1 ? newAuction.buyPrice : newAuction.startingPrice, block.timestamp, newAuction.erc20Token ); }",
        "vulnerability": "Reentrancy Vulnerability",
        "reason": "This function interacts with external contracts by calling 'Token.getApproved' and 'Token.safeTransferFrom', which could potentially be exploited by reentrancy attacks. The function should use a checks-effects-interactions pattern to prevent reentrancy.",
        "file_name": "0x03fb31bb6def4dd3a7ea3b0fa6bdecc940e75795.sol"
    },
    {
        "function_name": "collect",
        "code": "function collect(uint256 tokenID, address _mintableToken) public { IMintableToken Token = IMintableToken(_mintableToken); auction memory _auction = auctions[_mintableToken][tokenID]; TokenDetArrayLib.TokenDet memory _tokenDet = TokenDetArrayLib.TokenDet(_mintableToken,tokenID); require( block.timestamp > _auction.closingTime, \"Auction Not Over!\" ); address payable lastOwner2 = _auction.lastOwner; uint256 royalities = Token.royalities(tokenID); address payable creator = Token.creators(tokenID); uint256 royality = (royalities * _auction.currentBid) / 10000; uint256 brokerageAmount = (brokerage * _auction.currentBid) / 10000; uint256 lastOwner_funds = _auction.currentBid - royality - brokerageAmount; if (_auction.buyer == true) { if (_auction.erc20Token == address(0)) { creator.transfer(royality); lastOwner2.transfer(lastOwner_funds); } else { IERC20 erc20Token = IERC20(_auction.erc20Token); erc20Token.transfer(creator, royality); erc20Token.transfer(lastOwner2, lastOwner_funds); } brokerageBalance[_auction.erc20Token] += brokerageAmount; tokenOpenForSale[_mintableToken][tokenID] = false; Token.safeTransferFrom( Token.ownerOf(tokenID), _auction.highestBidder, tokenID ); emit Buy( _tokenDet.NFTAddress, _tokenDet.tokenID, lastOwner2, _auction.highestBidder, _auction.currentBid, block.timestamp, _auction.erc20Token ); } emit Collect( _tokenDet.NFTAddress, _tokenDet.tokenID, lastOwner2, _auction.highestBidder, msg.sender, block.timestamp, _auction.erc20Token ); tokensForSale.removeTokenDet(_tokenDet); tokensForSalePerUser[lastOwner2].removeTokenDet(_tokenDet); auctionTokens.removeTokenDet(_tokenDet); delete auctions[_mintableToken][tokenID]; }",
        "vulnerability": "Reentrancy Vulnerability",
        "reason": "The function transfers funds to external addresses 'creator' and 'lastOwner2' before updating the state variables. This can be exploited for reentrancy attacks if the receiving contracts are malicious. The function should ensure state changes occur before any interaction with external contracts.",
        "file_name": "0x03fb31bb6def4dd3a7ea3b0fa6bdecc940e75795.sol"
    }
]