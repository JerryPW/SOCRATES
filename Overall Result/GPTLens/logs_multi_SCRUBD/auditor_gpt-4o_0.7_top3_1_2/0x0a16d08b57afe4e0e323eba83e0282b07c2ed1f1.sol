[
    {
        "function_name": "forceSend",
        "code": "function forceSend() external onlyOwner { (bool success,) = address(feeWallet).call{value : address(this).balance}(\"\"); success = false; }",
        "vulnerability": "Potential loss of funds due to unchecked call result",
        "reason": "The function uses the low-level call method to transfer Ether to the feeWallet, but the success of this operation is not correctly handled. The variable 'success' is set to false immediately after the call, which means any failure in the transfer is ignored, potentially leading to loss of funds.",
        "file_name": "0x0a16d08b57afe4e0e323eba83e0282b07c2ed1f1.sol"
    },
    {
        "function_name": "_transfer",
        "code": "function _transfer( address from, address to, uint256 amount ) internal override { require(from != address(0), \"ERC20: transfer from the zero address\"); require(to != address(0), \"ERC20: transfer to the zero address\"); require(!_isBlacklisted[from], \"Your address has been marked as a sniper, you are unable to transfer or swap.\"); if (amount == 0) { super._transfer(from, to, 0); return; } if(tradingActive) { require(block.number >= _launchBlock + deadBlocks, \"NOT BOT\"); } if (limitsInEffect) { if ( from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !_swapping ) { if (!tradingActive) { require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading is not active.\"); } if (balanceOf(to) == 0 && _holderFirstBuyTimestamp[to] == 0) { _holderFirstBuyTimestamp[to] = block.timestamp; } if (transferDelayEnabled) { if (to != owner() && to != address(uniswapV2Router) && to != address(uniswapV2Pair)) { require(_holderLastTransferTimestamp[tx.origin] < block.number, \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\"); _holderLastTransferTimestamp[tx.origin] = block.number; } } if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) { require(amount <= maxTransactionAmount, \"Buy transfer amount exceeds the maxTransactionAmount.\"); require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\"); } else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) { require(amount <= maxTransactionAmount, \"Sell transfer amount exceeds the maxTransactionAmount.\"); } else if (!_isExcludedMaxTransactionAmount[to]) { require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\"); } } } uint256 contractTokenBalance = balanceOf(address(this)); bool canSwap = contractTokenBalance >= swapTokensAtAmount; if ( canSwap && !_swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to] ) { _swapping = true; swapBack(); _swapping = false; } bool takeFee = !_swapping; if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) { takeFee = false; } uint256 fees = 0; if (takeFee) { fees = amount.mul(totalFees).div(100); _tokensForLiquidity += fees * _liquidityFee / totalFees; _tokensForMarketing += fees * _marketingFee / totalFees; if (fees > 0) { super._transfer(from, address(this), fees); } amount -= fees; } super._transfer(from, to, amount); }",
        "vulnerability": "Potential denial of service due to transfer restrictions",
        "reason": "The transfer function imposes several restrictions based on trading activity, dead blocks, and transaction limits. If improperly configured or manipulated, these restrictions could prevent legitimate transfers, effectively creating a denial of service for users trying to transfer tokens.",
        "file_name": "0x0a16d08b57afe4e0e323eba83e0282b07c2ed1f1.sol"
    },
    {
        "function_name": "Launch",
        "code": "function Launch(uint256 _percent) external onlyOwner payable { require(_percent <= 100, 'must be between 0-100%'); require(_launchTime == 0, 'already launched'); require(_percent == 0 || msg.value > 0, 'need ETH for initial LP'); deadBlocks = 0; uint256 _lpSupply = (totalSupply() * _percent) / 100; uint256 _leftover = totalSupply() - _lpSupply; if (_lpSupply > 0) { _addLp(_lpSupply, msg.value); } if (_leftover > 0) { _transfer(address(this), owner(), _leftover); } tradingActive = true; _launchTime = block.timestamp; _launchBlock = block.number; }",
        "vulnerability": "Improper initialization of launch parameters",
        "reason": "The Launch function can be called with a zero percent allocation, which bypasses the liquidity provision logic, potentially leaving the token without initial liquidity on Uniswap. This could lead to price manipulation or failed trades if liquidity is insufficient or not properly set up.",
        "file_name": "0x0a16d08b57afe4e0e323eba83e0282b07c2ed1f1.sol"
    }
]