[
    {
        "function_name": "function()",
        "code": "function() payable { if(now > priceIncrease_20_February){ price = \"0.007 Ether for 1 microBDSM\"; realPrice = 0.007 * 1 ether; } else if(now > priceIncrease_20_January){ price = \"0.00525 Ether for 1 microBDSM\"; realPrice = 0.00525 * 1 ether; } tokenFree = sharesTokenAddress.balanceOf(this); if (now < startICO_20_December) { msg.sender.transfer(msg.value); } else if (now > stopICO_20_March) { msg.sender.transfer(msg.value); if(!tokensWithdrawn){ sharesTokenAddress.transfer(safeContract, sharesTokenAddress.balanceOf(this)); tokenFree = sharesTokenAddress.balanceOf(this); tokensWithdrawn = true; crowdsaleClosed = true; } } else if (crowdsaleClosed) { msg.sender.transfer(msg.value); } else { uint256 tokenToBuy = msg.value / realPrice * coeff; if(tokenToBuy <= 0) msg.sender.transfer(msg.value); require(tokenToBuy > 0); uint256 actualETHTransfer = tokenToBuy * realPrice / coeff; if (tokenFree >= tokenToBuy) { owner.transfer(actualETHTransfer); if (msg.value > actualETHTransfer){ msg.sender.transfer(msg.value - actualETHTransfer); } sharesTokenAddress.transfer(msg.sender, tokenToBuy); tokenSold += tokenToBuy; tokenFree -= tokenToBuy; if(tokenFree==0) crowdsaleClosed = true; } else { uint256 sendETH = tokenFree * realPrice / coeff; owner.transfer(sendETH); sharesTokenAddress.transfer(msg.sender, tokenFree); msg.sender.transfer(msg.value - sendETH); tokenSold += tokenFree; tokenFree = sharesTokenAddress.balanceOf(this); crowdsaleClosed = true; } } TokenFree(tokenFree); CrowdsaleClosed(crowdsaleClosed); } }",
        "vulnerability": "Reentrancy Vulnerability",
        "reason": "The fallback function uses msg.sender.transfer() multiple times, which is vulnerable to reentrancy attacks. An attacker could exploit this by re-entering the contract during the transfer process to drain funds or alter contract state unexpectedly. The use of call.value() instead of transfer or sending the funds after state changes can mitigate this risk.",
        "file_name": "0x61683dfbe07e98a4edbddc2f1f1a44a75fa74912.sol"
    },
    {
        "function_name": "function()",
        "code": "function() payable { if(now > priceIncrease_20_February){ price = \"0.007 Ether for 1 microBDSM\"; realPrice = 0.007 * 1 ether; } else if(now > priceIncrease_20_January){ price = \"0.00525 Ether for 1 microBDSM\"; realPrice = 0.00525 * 1 ether; } tokenFree = sharesTokenAddress.balanceOf(this); if (now < startICO_20_December) { msg.sender.transfer(msg.value); } else if (now > stopICO_20_March) { msg.sender.transfer(msg.value); if(!tokensWithdrawn){ sharesTokenAddress.transfer(safeContract, sharesTokenAddress.balanceOf(this)); tokenFree = sharesTokenAddress.balanceOf(this); tokensWithdrawn = true; crowdsaleClosed = true; } } else if (crowdsaleClosed) { msg.sender.transfer(msg.value); } else { uint256 tokenToBuy = msg.value / realPrice * coeff; if(tokenToBuy <= 0) msg.sender.transfer(msg.value); require(tokenToBuy > 0); uint256 actualETHTransfer = tokenToBuy * realPrice / coeff; if (tokenFree >= tokenToBuy) { owner.transfer(actualETHTransfer); if (msg.value > actualETHTransfer){ msg.sender.transfer(msg.value - actualETHTransfer); } sharesTokenAddress.transfer(msg.sender, tokenToBuy); tokenSold += tokenToBuy; tokenFree -= tokenToBuy; if(tokenFree==0) crowdsaleClosed = true; } else { uint256 sendETH = tokenFree * realPrice / coeff; owner.transfer(sendETH); sharesTokenAddress.transfer(msg.sender, tokenFree); msg.sender.transfer(msg.value - sendETH); tokenSold += tokenFree; tokenFree = sharesTokenAddress.balanceOf(this); crowdsaleClosed = true; } } TokenFree(tokenFree); CrowdsaleClosed(crowdsaleClosed); } }",
        "vulnerability": "Integer Arithmetic Issues",
        "reason": "The calculation of tokenToBuy as msg.value / realPrice * coeff can result in rounding errors or zero values, especially if msg.value is very small. This can lead to unexpected behavior, such as failing to purchase any tokens despite sending ether. Proper validation and use of SafeMath can help prevent these issues, ensuring correct arithmetic operations.",
        "file_name": "0x61683dfbe07e98a4edbddc2f1f1a44a75fa74912.sol"
    },
    {
        "function_name": "function()",
        "code": "function() payable { if(now > priceIncrease_20_February){ price = \"0.007 Ether for 1 microBDSM\"; realPrice = 0.007 * 1 ether; } else if(now > priceIncrease_20_January){ price = \"0.00525 Ether for 1 microBDSM\"; realPrice = 0.00525 * 1 ether; } tokenFree = sharesTokenAddress.balanceOf(this); if (now < startICO_20_December) { msg.sender.transfer(msg.value); } else if (now > stopICO_20_March) { msg.sender.transfer(msg.value); if(!tokensWithdrawn){ sharesTokenAddress.transfer(safeContract, sharesTokenAddress.balanceOf(this)); tokenFree = sharesTokenAddress.balanceOf(this); tokensWithdrawn = true; crowdsaleClosed = true; } } else if (crowdsaleClosed) { msg.sender.transfer(msg.value); } else { uint256 tokenToBuy = msg.value / realPrice * coeff; if(tokenToBuy <= 0) msg.sender.transfer(msg.value); require(tokenToBuy > 0); uint256 actualETHTransfer = tokenToBuy * realPrice / coeff; if (tokenFree >= tokenToBuy) { owner.transfer(actualETHTransfer); if (msg.value > actualETHTransfer){ msg.sender.transfer(msg.value - actualETHTransfer); } sharesTokenAddress.transfer(msg.sender, tokenToBuy); tokenSold += tokenToBuy; tokenFree -= tokenToBuy; if(tokenFree==0) crowdsaleClosed = true; } else { uint256 sendETH = tokenFree * realPrice / coeff; owner.transfer(sendETH); sharesTokenAddress.transfer(msg.sender, tokenFree); msg.sender.transfer(msg.value - sendETH); tokenSold += tokenFree; tokenFree = sharesTokenAddress.balanceOf(this); crowdsaleClosed = true; } } TokenFree(tokenFree); CrowdsaleClosed(crowdsaleClosed); } }",
        "vulnerability": "Unsafe External Calls",
        "reason": "The contract makes multiple external token transfers and ether transfers without checking the success of these operations. This is risky as the external contract can revert or fail, potentially resulting in loss of funds or incorrect state updates. Implementing proper checks, such as using OpenZeppelin's SafeERC20 for token transfers and ensuring ether transfer success, is crucial to mitigate this vulnerability.",
        "file_name": "0x61683dfbe07e98a4edbddc2f1f1a44a75fa74912.sol"
    }
]