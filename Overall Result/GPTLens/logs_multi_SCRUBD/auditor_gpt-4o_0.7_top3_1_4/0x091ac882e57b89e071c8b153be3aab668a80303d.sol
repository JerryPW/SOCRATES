[
    {
        "function_name": "getTownTokens",
        "code": "function getTownTokens(address holder) public payable returns (bool) { require(holder != address(0), \"holder address cannot be null\"); uint256 amount = msg.value; uint256 tokenAmount = IWantTakeTokensToAmount(amount); uint256 rate = currentRate(); if (_transactionsCount < _durationOfMinTokenGetAmount && tokenAmount < _minTokenGetAmount) { return false; } if (tokenAmount >= _maxTokenGetAmount) { tokenAmount = _maxTokenGetAmount; uint256 change = amount.sub(_maxTokenGetAmount.mul(rate).div(10 ** 18)); msg.sender.transfer(change); amount = amount.sub(change); } if (_token.balanceOf(address(this)) >= tokenAmount) { TransactionsInfo memory transactionsHistory = TransactionsInfo(rate, tokenAmount); _token.transfer(holder, tokenAmount); _historyTransactions[holder].push(transactionsHistory); _transactionsCount = _transactionsCount.add(1); } else { if (_token.balanceOf(address(this)) > 0) { uint256 tokenBalance = _token.balanceOf(address(this)); _token.transfer(holder, tokenBalance); TransactionsInfo memory transactionsHistory = TransactionsInfo(rate, tokenBalance); _historyTransactions[holder].push(transactionsHistory); tokenAmount = tokenAmount.sub(tokenBalance); } TransactionsInfo memory transactionsInfo = TransactionsInfo(rate, tokenAmount); TownTokenRequest memory tokenRequest = TownTokenRequest(holder, transactionsInfo); _queueTownTokenRequests.push(tokenRequest); } for (uint256 i = 0; i < _remunerationsQueue.length; ++i) { if (_remunerationsQueue[i]._priority == 1) { if (_remunerationsQueue[i]._amount > amount) { _remunerationsQueue[i]._address.transfer(_remunerationsQueue[i]._amount); amount = amount.sub(_remunerationsQueue[i]._amount); delete _remunerationsQueue[i]; for (uint j = i + 1; j < _remunerationsQueue.length; ++j) { _remunerationsQueue[j - 1] = _remunerationsQueue[j]; } _remunerationsQueue.length--; } else { _remunerationsQueue[i]._address.transfer(amount); _remunerationsQueue[i]._amount = _remunerationsQueue[i]._amount.sub(amount); break; } } } for (uint256 i = 0; i < _remunerationsQueue.length; ++i) { if (_remunerationsQueue[i]._amount > amount) { _remunerationsQueue[i]._address.transfer(_remunerationsQueue[i]._amount); amount = amount.sub(_remunerationsQueue[i]._amount); delete _remunerationsQueue[i]; for (uint j = i + 1; j < _remunerationsQueue.length; ++j) { _remunerationsQueue[j - 1] = _remunerationsQueue[j]; } _remunerationsQueue.length--; } else { _remunerationsQueue[i]._address.transfer(amount); _remunerationsQueue[i]._amount = _remunerationsQueue[i]._amount.sub(amount); break; } } return true; }",
        "vulnerability": "Reentrancy vulnerability",
        "reason": "The function processes external calls (transfer) before updating the internal state (remunerationsQueue), which can be exploited by reentrancy attacks. An attacker could recursively call getTownTokens, causing unexpected behaviors or draining funds.",
        "file_name": "0x091ac882e57b89e071c8b153be3aab668a80303d.sol"
    },
    {
        "function_name": "claimFunds",
        "code": "function claimFunds(address payable official) public returns (bool) { require(_officialsLedger[official]._amount != 0, \"official address not found in ledger\"); if (now >= _officialsLedger[official]._decayTimestamp) { RemunerationsOfficialsInfo memory info = RemunerationsOfficialsInfo(0, 0); _officialsLedger[official] = info; return false; } uint256 amount = _officialsLedger[official]._amount; if (address(this).balance >= amount) { official.transfer(amount); } else { RemunerationsInfo memory info = RemunerationsInfo(official, 1, amount); _remunerationsQueue.push(info); } RemunerationsOfficialsInfo memory info = RemunerationsOfficialsInfo(0, 0); _officialsLedger[official] = info; return true; }",
        "vulnerability": "Reentrancy vulnerability",
        "reason": "The function transfers funds to an externally controlled address before updating the official's ledger, allowing a reentrancy attack. An attacker could repeatedly call claimFunds to drain the contract before the internal state is updated.",
        "file_name": "0x091ac882e57b89e071c8b153be3aab668a80303d.sol"
    },
    {
        "function_name": "sendExternalTokens",
        "code": "function sendExternalTokens(address official, address externalToken) external returns (bool) { ERC20 tokenERC20 = ERC20(externalToken); uint256 balance = tokenERC20.allowance(official, address(this)); require(tokenERC20.balanceOf(official) >= balance, \"Official should have external tokens for approved\"); require(balance > 0, \"External tokens must be approved for town smart contract\"); tokenERC20.transferFrom(official, address(this), balance); ExternalTokenDistributionsInfo memory tokenInfo; tokenInfo._official = official; tokenInfo._distributionsCount = _distributionPeriodsNumber; tokenInfo._distributionAmount = balance.div(_distributionPeriodsNumber); ExternalToken storage tokenObj = _externalTokens[externalToken]; if (tokenObj._entities.length == 0) { _externalTokensAddresses.push(externalToken); } tokenObj._entities.push(tokenInfo); return true; }",
        "vulnerability": "Approval race condition",
        "reason": "The function relies on the allowance mechanism without preventing the race condition between setting allowance and transferFrom. An attacker could exploit this by altering the allowance after it's checked but before transferFrom is executed, leading to unauthorized token transfers.",
        "file_name": "0x091ac882e57b89e071c8b153be3aab668a80303d.sol"
    }
]