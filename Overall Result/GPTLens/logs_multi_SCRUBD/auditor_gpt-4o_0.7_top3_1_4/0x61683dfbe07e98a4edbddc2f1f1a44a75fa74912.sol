[
    {
        "function_name": "BDSM_Crowdsale",
        "code": "function BDSM_Crowdsale(address _tokenAddress, address _owner, address _stopScamHolder) { owner = _owner; sharesTokenAddress = token(_tokenAddress); safeContract = _stopScamHolder; }",
        "vulnerability": "Lack of constructor validation",
        "reason": "The constructor does not validate the addresses passed to it such as `_tokenAddress`, `_owner`, and `_stopScamHolder`. This means that an incorrect or malicious address could be passed, leading to potential loss of funds or tokens. For instance, if a zero or incorrect `sharesTokenAddress` is passed, all token transfers would fail. Similarly, if an attacker sets themselves as `owner` or `safeContract`, it could allow unauthorized access to funds or tokens.",
        "file_name": "0x61683dfbe07e98a4edbddc2f1f1a44a75fa74912.sol"
    },
    {
        "function_name": "function() payable",
        "code": "function() payable { if(now > priceIncrease_20_February){ price = \"0.007 Ether for 1 microBDSM\"; realPrice = 0.007 * 1 ether; } else if(now > priceIncrease_20_January){ price = \"0.00525 Ether for 1 microBDSM\"; realPrice = 0.00525 * 1 ether; } tokenFree = sharesTokenAddress.balanceOf(this); if (now < startICO_20_December) { msg.sender.transfer(msg.value); } else if (now > stopICO_20_March) { msg.sender.transfer(msg.value); if(!tokensWithdrawn){ sharesTokenAddress.transfer(safeContract, sharesTokenAddress.balanceOf(this)); tokenFree = sharesTokenAddress.balanceOf(this); tokensWithdrawn = true; crowdsaleClosed = true; } } else if (crowdsaleClosed) { msg.sender.transfer(msg.value); } else { uint256 tokenToBuy = msg.value / realPrice * coeff; if(tokenToBuy <= 0) msg.sender.transfer(msg.value); require(tokenToBuy > 0); uint256 actualETHTransfer = tokenToBuy * realPrice / coeff; if (tokenFree >= tokenToBuy) { owner.transfer(actualETHTransfer); if (msg.value > actualETHTransfer){ msg.sender.transfer(msg.value - actualETHTransfer); } sharesTokenAddress.transfer(msg.sender, tokenToBuy); tokenSold += tokenToBuy; tokenFree -= tokenToBuy; if(tokenFree==0) crowdsaleClosed = true; } else { uint256 sendETH = tokenFree * realPrice / coeff; owner.transfer(sendETH); sharesTokenAddress.transfer(msg.sender, tokenFree); msg.sender.transfer(msg.value - sendETH); tokenSold += tokenFree; tokenFree = sharesTokenAddress.balanceOf(this); crowdsaleClosed = true; } } TokenFree(tokenFree); CrowdsaleClosed(crowdsaleClosed); }",
        "vulnerability": "Reentrancy vulnerability",
        "reason": "The fallback function makes several calls to transfer Ether out to msg.sender before updating the state variables. This opens the contract to a reentrancy attack where an attacker can recursively call the fallback function to drain the contract's balance. Specifically, the calls `msg.sender.transfer(msg.value)` and `msg.sender.transfer(msg.value - actualETHTransfer)` can be exploited if an attacker creates a malicious contract that calls back into the fallback function.",
        "file_name": "0x61683dfbe07e98a4edbddc2f1f1a44a75fa74912.sol"
    },
    {
        "function_name": "function() payable",
        "code": "function() payable { if(now > priceIncrease_20_February){ price = \"0.007 Ether for 1 microBDSM\"; realPrice = 0.007 * 1 ether; } else if(now > priceIncrease_20_January){ price = \"0.00525 Ether for 1 microBDSM\"; realPrice = 0.00525 * 1 ether; } tokenFree = sharesTokenAddress.balanceOf(this); if (now < startICO_20_December) { msg.sender.transfer(msg.value); } else if (now > stopICO_20_March) { msg.sender.transfer(msg.value); if(!tokensWithdrawn){ sharesTokenAddress.transfer(safeContract, sharesTokenAddress.balanceOf(this)); tokenFree = sharesTokenAddress.balanceOf(this); tokensWithdrawn = true; crowdsaleClosed = true; } } else if (crowdsaleClosed) { msg.sender.transfer(msg.value); } else { uint256 tokenToBuy = msg.value / realPrice * coeff; if(tokenToBuy <= 0) msg.sender.transfer(msg.value); require(tokenToBuy > 0); uint256 actualETHTransfer = tokenToBuy * realPrice / coeff; if (tokenFree >= tokenToBuy) { owner.transfer(actualETHTransfer); if (msg.value > actualETHTransfer){ msg.sender.transfer(msg.value - actualETHTransfer); } sharesTokenAddress.transfer(msg.sender, tokenToBuy); tokenSold += tokenToBuy; tokenFree -= tokenToBuy; if(tokenFree==0) crowdsaleClosed = true; } else { uint256 sendETH = tokenFree * realPrice / coeff; owner.transfer(sendETH); sharesTokenAddress.transfer(msg.sender, tokenFree); msg.sender.transfer(msg.value - sendETH); tokenSold += tokenFree; tokenFree = sharesTokenAddress.balanceOf(this); crowdsaleClosed = true; } } TokenFree(tokenFree); CrowdsaleClosed(crowdsaleClosed); }",
        "vulnerability": "Arithmetic precision error",
        "reason": "The calculation of `tokenToBuy` as `msg.value / realPrice * coeff` may lead to precision loss due to integer division in Solidity. If `msg.value` is less than `realPrice`, the division results in zero, causing the `tokenToBuy` to be zero, and the condition `require(tokenToBuy > 0)` could be bypassed, refunding the user their Ether without purchasing any tokens. This could lead to unexpected behavior or denial of service in the crowdsale.",
        "file_name": "0x61683dfbe07e98a4edbddc2f1f1a44a75fa74912.sol"
    }
]