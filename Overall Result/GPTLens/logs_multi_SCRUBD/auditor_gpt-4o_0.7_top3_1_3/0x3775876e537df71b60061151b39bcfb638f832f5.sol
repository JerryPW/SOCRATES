[
    {
        "function_name": "withdraw",
        "code": "function withdraw() external nonReentrant { UserInfo storage user = userInfo[msg.sender]; require(user.amount >= 0, \"You havent invested yet\"); _updatePool(); uint256 pendingUsdt = user.pendingUsdtReward.add(user.amount.mul(accUsdtPerShare).div(PRECISION_FACTOR).sub(user.rewardUsdtDebt)); uint256 pendingEth = user.pendingEthReward.add(user.amount.mul(accEthPerShare).div(PRECISION_FACTOR).sub(user.rewardEthDebt)); token.transfer(address(msg.sender), user.amount); if(block.timestamp > user.depositTime.add(requiredTimeForReward)){ if (pendingUsdt > 0) { USDT.transfer(address(msg.sender), pendingUsdt); } if(pendingEth > 0){ payable(msg.sender).transfer(pendingEth); lastEthBalance = address(this).balance; } }else { amountUsdtForReward = amountUsdtForReward.add(pendingUsdt); amountEthForReward = amountEthForReward.add(pendingEth); } totalStakedAmount = totalStakedAmount.sub(user.amount); user.amount = 0; user.depositTime = 0; user.rewardUsdtDebt = 0; user.pendingUsdtReward = 0; user.rewardEthDebt = 0; user.pendingEthReward = 0; emit Withdraw(msg.sender, user.amount); }",
        "vulnerability": "Reentrancy Vulnerability",
        "reason": "The withdraw function allows for the transfer of tokens and ETH before state variables are updated, making it vulnerable to a reentrancy attack despite the presence of a nonReentrant modifier. An attacker could exploit this by calling the function recursively before the state is updated, allowing them to drain funds.",
        "file_name": "0x3775876e537df71b60061151b39bcfb638f832f5.sol"
    },
    {
        "function_name": "distributeDividend",
        "code": "function distributeDividend(address shareholder) internal { if(shares[shareholder].amount == 0){ return; } uint256 amount = getUnpaidEarnings(shareholder); if(amount > 0){ (bool success,) = payable(shareholder).call{value: amount, gas: 3000}(\"\"); if(success){ totalDistributed = totalDistributed.add(amount); shareholderClaims[shareholder] = block.timestamp; shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount); shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount); } } }",
        "vulnerability": "Gas Limit Vulnerability",
        "reason": "The distributeDividend function uses a low fixed gas limit of 3000 for sending Ether which might not be enough, causing transactions to fail. This can result in dividends being stuck and shareholders not receiving their funds, especially if more logic is added in future updates.",
        "file_name": "0x3775876e537df71b60061151b39bcfb638f832f5.sol"
    },
    {
        "function_name": "swapAndSend",
        "code": "function swapAndSend() private lockTheSwap { uint256 contractTokenBalance = balanceOf(address(this)); uint256 maxroutersell = _totalSupply.div(1000).mul(maxrouterpercent); if(contractTokenBalance > maxroutersell && maxrouterlimitenabled) { contractTokenBalance = contractTokenBalance.div(10); } uint256 _totalFee = _liquidityFee.add(_ethReflectionFee).add(_stakingFee).add(_marketingFee); uint256 amountForLiquidity = contractTokenBalance.mul(_liquidityFee).div(_totalFee); uint256 amountForEthReflection = contractTokenBalance.mul(_ethReflectionFee).div(_totalFee); uint256 amountForStaking = contractTokenBalance.mul(_stakingFee).div(_totalFee); uint256 amountForMarketingAndDev = contractTokenBalance.sub(amountForLiquidity).sub(amountForEthReflection).sub(amountForStaking); uint256 half = amountForLiquidity.div(2); uint256 otherHalf = amountForLiquidity.sub(half); uint256 swapAmount = half.add(amountForEthReflection).add(amountForStaking).add(amountForMarketingAndDev); swapTokensForEth(swapAmount); uint256 ethBalance = address(this).balance; uint256 ethLiquid = ethBalance.mul(half).div(swapAmount); uint256 ethReflection = ethBalance.mul(amountForEthReflection).div(swapAmount); uint256 ethStaking = ethBalance.mul(amountForStaking).div(swapAmount); uint256 ethMarketingAndDev = ethBalance.sub(ethLiquid).sub(ethReflection).sub(ethStaking); if(ethMarketingAndDev > 0){ payable(marketingWallet).transfer(ethMarketingAndDev.mul(70).div(100)); payable(developmentWallet).transfer(ethMarketingAndDev.mul(30).div(100)); } if(ethReflection > 0) try distributor.deposit{value: ethReflection}() {} catch {} if(ethStaking > 0){ try staking.distributeUsdtToStaking{value: ethStaking}() {} catch {} } if(ethLiquid > 0) addLiquidity(otherHalf, ethLiquid); }",
        "vulnerability": "Potential Front-Running Vulnerability",
        "reason": "The swapAndSend function handles large transactions that can be predicted, allowing attackers to front-run these transactions. By observing the mempool and submitting transactions with higher gas fees, attackers can potentially manipulate the market or benefit from the price impact caused by the large swap.",
        "file_name": "0x3775876e537df71b60061151b39bcfb638f832f5.sol"
    }
]