[
    {
        "function_name": "transfer",
        "code": "function transfer(address recipient, uint256 amount) public returns (bool) { if (msg.sender != address(_town)) { if (_town.checkProposal(recipient) == true) { super.transfer(address(_town), amount); return _town.voteOn(recipient, amount); } } if (recipient != address(_town)) { bool found = false; for (uint i = 0; i < _holders.length; ++i) { if (_holders[i] == recipient) { found = true; break; } } if (found == false) { _holders.push(recipient); } } if (balanceOf(address(msg.sender)) == amount && msg.sender != address(_town)) { uint i = 0; for (; i < _holders.length; ++i) { if (_holders[i] == address(msg.sender)) { break; } } if (i < (_holders.length - 1)) { _holders[i] = _holders[_holders.length - 1]; delete _holders[_holders.length - 1]; _holders.length--; } } return super.transfer(recipient, amount); }",
        "vulnerability": "Reentrancy vulnerability in transfer",
        "reason": "The function `transfer` interacts with an external contract `_town` without using proper reentrancy protection. This could be exploited by an attacker to make reentrant calls, potentially altering the state of the contract unexpectedly.",
        "file_name": "0x091ac882e57b89e071c8b153be3aab668a80303d.sol"
    },
    {
        "function_name": "claimExternalTokens",
        "code": "function claimExternalTokens(address holder) public returns (bool) { address[] memory externalTokensForHolder = _ledgerExternalTokensAddresses[holder]; if (externalTokensForHolder.length > 0) { for (uint256 i = externalTokensForHolder.length - 1; ; --i) { ERC20(externalTokensForHolder[i]).transfer(holder, _townHoldersLedger[holder][externalTokensForHolder[i]]); delete _townHoldersLedger[holder][externalTokensForHolder[i]]; delete _ledgerExternalTokensAddresses[holder][i]; _ledgerExternalTokensAddresses[holder].length--; if (i == 0) break; } } return true; }",
        "vulnerability": "Reentrancy vulnerability in claimExternalTokens",
        "reason": "The `claimExternalTokens` function transfers tokens to the holder without any reentrancy guard. An attacker could exploit this by reentering the contract and continuously withdrawing tokens, leading to theft of funds.",
        "file_name": "0x091ac882e57b89e071c8b153be3aab668a80303d.sol"
    },
    {
        "function_name": "getTownTokens",
        "code": "function getTownTokens(address holder) public payable returns (bool) { require(holder != address(0), \"holder address cannot be null\"); uint256 amount = msg.value; uint256 tokenAmount = IWantTakeTokensToAmount(amount); uint256 rate = currentRate(); if (_transactionsCount < _durationOfMinTokenGetAmount && tokenAmount < _minTokenGetAmount) { return false; } if (tokenAmount >= _maxTokenGetAmount) { tokenAmount = _maxTokenGetAmount; uint256 change = amount.sub(_maxTokenGetAmount.mul(rate).div(10 ** 18)); msg.sender.transfer(change); amount = amount.sub(change); } if (_token.balanceOf(address(this)) >= tokenAmount) { TransactionsInfo memory transactionsHistory = TransactionsInfo(rate, tokenAmount); _token.transfer(holder, tokenAmount); _historyTransactions[holder].push(transactionsHistory); _transactionsCount = _transactionsCount.add(1); } else { if (_token.balanceOf(address(this)) > 0) { uint256 tokenBalance = _token.balanceOf(address(this)); _token.transfer(holder, tokenBalance); TransactionsInfo memory transactionsHistory = TransactionsInfo(rate, tokenBalance); _historyTransactions[holder].push(transactionsHistory); tokenAmount = tokenAmount.sub(tokenBalance); } TransactionsInfo memory transactionsInfo = TransactionsInfo(rate, tokenAmount); TownTokenRequest memory tokenRequest = TownTokenRequest(holder, transactionsInfo); _queueTownTokenRequests.push(tokenRequest); } for (uint256 i = 0; i < _remunerationsQueue.length; ++i) { if (_remunerationsQueue[i]._priority == 1) { if (_remunerationsQueue[i]._amount > amount) { _remunerationsQueue[i]._address.transfer(_remunerationsQueue[i]._amount); amount = amount.sub(_remunerationsQueue[i]._amount); delete _remunerationsQueue[i]; for (uint j = i + 1; j < _remunerationsQueue.length; ++j) { _remunerationsQueue[j - 1] = _remunerationsQueue[j]; } _remunerationsQueue.length--; } else { _remunerationsQueue[i]._address.transfer(amount); _remunerationsQueue[i]._amount = _remunerationsQueue[i]._amount.sub(amount); break; } } } for (uint256 i = 0; i < _remunerationsQueue.length; ++i) { if (_remunerationsQueue[i]._amount > amount) { _remunerationsQueue[i]._address.transfer(_remunerationsQueue[i]._amount); amount = amount.sub(_remunerationsQueue[i]._amount); delete _remunerationsQueue[i]; for (uint j = i + 1; j < _remunerationsQueue.length; ++j) { _remunerationsQueue[j - 1] = _remunerationsQueue[j]; } _remunerationsQueue.length--; } else { _remunerationsQueue[i]._address.transfer(amount); _remunerationsQueue[i]._amount = _remunerationsQueue[i]._amount.sub(amount); break; } } return true; }",
        "vulnerability": "Potential reentrancy in getTownTokens",
        "reason": "The `getTownTokens` function has multiple external calls, including transfers to `msg.sender` without reentrancy protection. An attacker could exploit this by making reentrant calls to deplete the contract's balance before the function logic completes.",
        "file_name": "0x091ac882e57b89e071c8b153be3aab668a80303d.sol"
    }
]