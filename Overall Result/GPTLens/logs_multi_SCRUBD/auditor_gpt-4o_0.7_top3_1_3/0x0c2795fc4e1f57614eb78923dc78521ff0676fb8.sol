[
    {
        "function_name": "acceptOwnership",
        "code": "function acceptOwnership() public { if (msg.sender == newOwner) { owner = newOwner; } }",
        "vulnerability": "Missing event emission for ownership transfer",
        "reason": "The 'acceptOwnership' function lacks an event emission to log when the ownership transfer takes place. This can lead to a lack of transparency and traceability in the contract's transaction history, making it difficult to audit or verify ownership changes.",
        "file_name": "0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol"
    },
    {
        "function_name": "buy",
        "code": "function buy (address _address, uint _value, uint _time) internal returns(bool) { uint8 currentPhase = getPhase(_time); if (currentPhase == 1){ uint tokensToSend = _value.mul((uint)(10).pow(decimals))/(stage_1_price); if(stage_1_TokensSold.add(tokensToSend) <= STAGE_1_MAXCAP){ ethCollected = ethCollected.add(_value); token.transfer(_address,tokensToSend); distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)); emit OnSuccessfullyBought(_address,_value,false,tokensToSend); stage_1_TokensSold = stage_1_TokensSold.add(tokensToSend); return true; }else{ if(stage_1_TokensSold == STAGE_1_MAXCAP){ return false; } uint availableTokens = STAGE_1_MAXCAP.sub(stage_1_TokensSold); uint ethRequire = availableTokens.mul(stage_1_price)/(uint(10).pow(decimals)); token.transfer(_address,availableTokens); msg.sender.transfer(_value.sub(ethRequire)); distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)); emit OnSuccessfullyBought(_address,ethRequire,false,availableTokens); ethCollected = ethCollected.add(ethRequire); stage_1_TokensSold = STAGE_1_MAXCAP; return true; } } if(currentPhase == 2){ if(!phase2Flag){ stage_2_maxcap = stage_2_maxcap.add(STAGE_1_MAXCAP.sub(stage_1_TokensSold)); phase2Flag = true; } tokensToSend = _value.mul((uint)(10).pow(decimals))/stage_2_price; if(stage_2_TokensSold.add(tokensToSend) <= stage_2_maxcap){ ethCollected = ethCollected.add(_value); token.transfer(_address,tokensToSend); distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)); emit OnSuccessfullyBought(_address,_value,false,tokensToSend); stage_2_TokensSold = stage_2_TokensSold.add(tokensToSend); return true; }else{ if(stage_2_TokensSold == stage_2_maxcap){ return false; } availableTokens = stage_2_maxcap.sub(stage_2_TokensSold); ethRequire = availableTokens.mul(stage_2_price)/(uint(10).pow(decimals)); token.transfer(_address,availableTokens); msg.sender.transfer(_value.sub(ethRequire)); distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)); emit OnSuccessfullyBought(_address,ethRequire,false,availableTokens); ethCollected = ethCollected.add(ethRequire); stage_2_TokensSold = stage_2_maxcap; return true; } } if(currentPhase == 3){ tokensToSend = _value.mul((uint)(10).pow(decimals))/stage_3_price; if(stage_3_TokensSold.add(tokensToSend) <= STAGE_3_MAXCAP){ ethCollected = ethCollected.add(_value); token.transfer(_address,tokensToSend); distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)); emit OnSuccessfullyBought(_address,_value,false,availableTokens); stage_3_TokensSold = stage_3_TokensSold.add(tokensToSend); return true; }else{ if(stage_3_TokensSold == STAGE_3_MAXCAP){ return false; } availableTokens = STAGE_3_MAXCAP.sub(stage_3_TokensSold); ethRequire = availableTokens.mul(stage_3_price)/(uint(10).pow(decimals)); token.transfer(_address,availableTokens); msg.sender.transfer(_value.sub(ethRequire)); distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)); emit OnSuccessfullyBought(_address,ethRequire,false,availableTokens); ethCollected = ethCollected.add(ethRequire); stage_3_TokensSold = STAGE_3_MAXCAP; return true; } } return false; }",
        "vulnerability": "Incorrect token calculation due to integer division",
        "reason": "The 'buy' function uses integer division for calculating 'tokensToSend', which can lead to rounding errors. This can result in fewer tokens being sent than expected, allowing an attacker to exploit these rounding errors for profit.",
        "file_name": "0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol"
    },
    {
        "function_name": "requestOraclizeBalance",
        "code": "function requestOraclizeBalance () public onlyOwner { updateFlag = false; if (address(this).balance >= oraclizeBalance){ owner.transfer(oraclizeBalance); }else{ owner.transfer(address(this).balance); } oraclizeBalance = 0; }",
        "vulnerability": "Potential reentrancy vulnerability",
        "reason": "The 'requestOraclizeBalance' function transfers ether before resetting the 'oraclizeBalance', which may allow a reentrancy attack. Although the 'onlyOwner' modifier mitigates some risk, it's still a best practice to update state variables before external calls to prevent potential reentrancy attacks.",
        "file_name": "0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol"
    }
]