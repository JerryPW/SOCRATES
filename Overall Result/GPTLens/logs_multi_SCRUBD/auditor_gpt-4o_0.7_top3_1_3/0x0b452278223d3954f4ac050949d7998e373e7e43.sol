[
    {
        "function_name": "initializeContract",
        "code": "function intializeContract(address payable setMarketWallet, address payable setDevWallet, string memory _tokenname, string memory _tokensymbol) external onlyOwner { require(!contractInitialized); _marketWallet = payable(setMarketWallet); _devWallet = payable(setDevWallet); _name = _tokenname; _symbol = _tokensymbol; startingSupply = 1_000_000_000_000; if (startingSupply < 10000000000000) { _decimals = 18; _decimalsMul = _decimals; } else { _decimals = 9; _decimalsMul = _decimals; } _tTotal = startingSupply * (10**_decimalsMul); _rTotal = (MAX - (MAX % _tTotal)); dexRouter = IUniswapV2Router02(_routerAddress); lpPair = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this)); lpPairs[lpPair] = true; _allowances[address(this)][address(dexRouter)] = type(uint256).max; _maxTxAmount = (_tTotal * 100) / 100; maxTxAmountUI = (startingSupply * 1000) / 100000; _maxWalletSize = (_tTotal * 100) / 100; maxWalletSizeUI = (startingSupply * 10) / 1000; swapThreshold = (_tTotal * 5) / 10000; swapAmount = (_tTotal * 5) / 1000; approve(_routerAddress, type(uint256).max); contractInitialized = true; _rOwned[owner()] = _rTotal; emit Transfer(ZERO, owner(), _tTotal); _approve(address(this), address(dexRouter), type(uint256).max); _transfer(owner(), address(this), balanceOf(owner())); dexRouter.addLiquidityETH{value: address(this).balance}( address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp ); Planted = block.number; }",
        "vulnerability": "Liquidity Addition Vulnerability",
        "reason": "The function `intializeContract` adds liquidity in the constructor without any checks on the initial liquidity provider. This can be exploited by a malicious owner to lock liquidity with unfavorable parameters or to execute a rug pull.",
        "file_name": "0x0b452278223d3954f4ac050949d7998e373e7e43.sol"
    },
    {
        "function_name": "transferOwner",
        "code": "function transferOwner(address newOwner) external onlyOwner() { require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\"); require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\"); setExcludedFromFee(_owner, false); setExcludedFromFee(newOwner, true); setExcludedFromReward(newOwner, true); if (_devWallet == payable(_owner)) _devWallet = payable(newOwner); _allowances[_owner][newOwner] = balanceOf(_owner); if(balanceOf(_owner) > 0) { _transfer(_owner, newOwner, balanceOf(_owner)); } _owner = newOwner; emit OwnershipTransferred(_owner, newOwner); }",
        "vulnerability": "Owner Transfer Vulnerability",
        "reason": "The `transferOwner` function allows the transfer of ownership without sufficient safeguards, potentially allowing the new owner to gain control over the contract's funds and settings. This can be exploited if the new owner is malicious or if the transfer is done in error.",
        "file_name": "0x0b452278223d3954f4ac050949d7998e373e7e43.sol"
    },
    {
        "function_name": "swapAndLiquify",
        "code": "function swapAndLiquify(uint256 contractTokenBalance) internal lockTheSwap { if (_liquidityRatio + _marketingRatio == 0) return; uint256 toLiquify = ((contractTokenBalance * _liquidityRatio) / (_liquidityRatio + _marketingRatio)) / 2; uint256 toSwapForEth = contractTokenBalance - toLiquify; address[] memory path = new address[](2); path[0] = address(this); path[1] = dexRouter.WETH(); dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens( toSwapForEth, 0, path, address(this), block.timestamp ); uint256 liquidityBalance = ((address(this).balance * _liquidityRatio) / (_liquidityRatio + _marketingRatio)) / 2; if (toLiquify > 0) { dexRouter.addLiquidityETH{value: liquidityBalance}( address(this), toLiquify, 0, 0, DEAD, block.timestamp ); emit SwapAndLiquify(toLiquify, liquidityBalance, toLiquify); } if (contractTokenBalance - toLiquify > 0) { uint256 OperationsFee = (address(this).balance); uint256 marketFee = OperationsFee/(ValueDivisor)*(MarketShare); uint256 devfeeshare = OperationsFee/(ValueDivisor)*(DevShare); _marketWallet.transfer(marketFee); _devWallet.transfer(devfeeshare); } }",
        "vulnerability": "Unprotected Swap and Liquify",
        "reason": "The `swapAndLiquify` function can be triggered by anyone when certain conditions are met, which can lead to front-running attacks. An attacker could manipulate token prices during the swap process, potentially leading to significant losses for token holders.",
        "file_name": "0x0b452278223d3954f4ac050949d7998e373e7e43.sol"
    }
]