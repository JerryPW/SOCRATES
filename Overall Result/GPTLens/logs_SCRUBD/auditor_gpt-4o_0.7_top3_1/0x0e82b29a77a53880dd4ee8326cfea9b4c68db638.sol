[
    {
        "function_name": "tokenOnboard",
        "code": "function tokenOnboard(address contractAddress, uint initialPrice, uint incrementPrice) public nonReentrant onlyOwner returns(bool) { if(contractAddressRecord[contractAddress] == false) { contractAddressRecord[contractAddress] = true; tokenLedger[contractAddress].initialPrice = initialPrice; tokenLedger[contractAddress].incrementPrice = incrementPrice; tokenLedger[contractAddress].supply = 0; tokenLedger[contractAddress].dividend = 0; emit onTokenOnboard(contractAddress, initialPrice, incrementPrice); return true; } }",
        "vulnerability": "Lack of input validation for token onboarding",
        "reason": "The function does not check if the contract address is a valid ERC20 contract. An attacker could onboard a non-compliant contract, leading to potential issues in other functions that assume compliance.",
        "file_name": "0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol"
    },
    {
        "function_name": "withdraw",
        "code": "function withdraw(address contractAddress) public nonReentrant { require(contractAddressRecord[contractAddress] == true); require(walletAddressRecord[msg.sender] == true); address _customerAddress = msg.sender; uint256 _dividends = myDividends(contractAddress, false); balanceLedger[_customerAddress][contractAddress].payOut += (int256) (_dividends * magnitude); _dividends += balanceLedger[_customerAddress][contractAddress].referralBalance; balanceLedger[_customerAddress][contractAddress].referralBalance = 0; if (contractAddress == address(0)){ payable(address(_customerAddress)).transfer(_dividends); } else{ ERC20(contractAddress).transfer(_customerAddress,_dividends); } emit onWithdraw(_customerAddress, contractAddress, _dividends); }",
        "vulnerability": "Lack of reentrancy protection on external calls",
        "reason": "The function makes an external call to transfer tokens without updating the balance first, which could be exploited for a reentrancy attack if the ReentrancyGuard is bypassed or misused elsewhere. This could potentially lead to double withdrawals.",
        "file_name": "0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol"
    },
    {
        "function_name": "purchaseCollate",
        "code": "function purchaseCollate(address contractAddress, uint256 _incomingToken, address _referredBy) internal returns(uint256) { address _customerAddress = msg.sender; uint256 _undividedDividends = SafeMath.div(_incomingToken, dividendFee); uint256 _referralBonus = SafeMath.div(_undividedDividends, 3); uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus); uint256 _taxedToken = SafeMath.sub(_incomingToken, _undividedDividends); uint256 _amountOfCollate = tokentoCollateral_(contractAddress,_taxedToken); uint256 _fee = _dividends * magnitude; require(_amountOfCollate > 0 && (SafeMath.add(_amountOfCollate,tokenLedger[contractAddress].supply) > tokenLedger[contractAddress].supply)); if( _referredBy != address(0) && _referredBy != _customerAddress && walletAddressRecord[_referredBy] == true ){ balanceLedger[_referredBy][contractAddress].referralBalance = SafeMath.add(balanceLedger[_referredBy][contractAddress].referralBalance, _referralBonus); } else { _dividends = SafeMath.add(_dividends, _referralBonus); _fee = _dividends * magnitude; } if(tokenLedger[contractAddress].supply > 0){ tokenLedger[contractAddress].supply = SafeMath.add(tokenLedger[contractAddress].supply, _amountOfCollate); tokenLedger[contractAddress].dividend += (_dividends * magnitude / (tokenLedger[contractAddress].supply)); _fee = _fee - (_fee-(_amountOfCollate * (_dividends * magnitude / (tokenLedger[contractAddress].supply)))); } else { tokenLedger[contractAddress].supply = _amountOfCollate; } balanceLedger[_customerAddress][contractAddress].tokenBalance = SafeMath.add(balanceLedger[_customerAddress][contractAddress].tokenBalance, _amountOfCollate); int256 _updatedPayouts = (int256) ((tokenLedger[contractAddress].dividend * _amountOfCollate) - _fee); balanceLedger[_customerAddress][contractAddress].payOut += _updatedPayouts; emit onPurchase(_customerAddress, contractAddress, _incomingToken, _amountOfCollate, _referredBy); return _amountOfCollate; }",
        "vulnerability": "Potential for integer overflow/underflow in calculations",
        "reason": "The function performs several arithmetic operations on user-controlled input without checks for overflow/underflow. Although SafeMath is used, if the input values are manipulated cleverly, there could be a bypass of arithmetic safety leading to incorrect ledger states.",
        "file_name": "0x0e82b29a77a53880dd4ee8326cfea9b4c68db638.sol"
    }
]