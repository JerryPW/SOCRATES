[
    {
        "function_name": "withdraw",
        "code": "function withdraw() onlyStronghands public { address _customerAddress = msg.sender; uint256 _dividends = myDividends(false); payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude); _dividends += referralBalance_[_customerAddress]; referralBalance_[_customerAddress] = 0; _customerAddress.transfer(_dividends); onWithdraw(_customerAddress, _dividends); }",
        "vulnerability": "Reentrancy vulnerability",
        "reason": "The `withdraw` function allows a user to transfer their dividends before updating the user's balance. An attacker could exploit this by recursively calling the `withdraw` function to drain funds before the state is updated, leading to potential loss of funds from the contract.",
        "file_name": "0x025cd28d7ef83e1c2ffe511d5f9290d54ba5dcf0.sol"
    },
    {
        "function_name": "sell",
        "code": "function sell(uint256 _amountOfTokens) onlyBagholders public { require(now >= startTime); address _customerAddress = msg.sender; require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]); uint256 _tokens = _amountOfTokens; uint256 _ethereum = tokensToEthereum_(_tokens); uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100); uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends); tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens); tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens); int256 _updatedPayouts = (int256) (_taxedEthereum * magnitude); payoutsTo_[_customerAddress] -= _updatedPayouts; moonIncContract.handleProductionDecrease.value(_dividends)(_customerAddress, _tokens * cookieProductionMultiplier); onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice()); }",
        "vulnerability": "Reentrancy vulnerability",
        "reason": "Similar to the `withdraw` function, the `sell` function also makes external calls (to `handleProductionDecrease`) before updating the user's token balance, which can be exploited using a reentrancy attack to manipulate token balances and potentially drain the contract.",
        "file_name": "0x025cd28d7ef83e1c2ffe511d5f9290d54ba5dcf0.sol"
    },
    {
        "function_name": "purchaseTokens",
        "code": "function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) { require(_incomingEthereum <= 1 finney); require( now >= startTime || (now >= startTime - 1 hours && !ambassadorsPremined[msg.sender] && ambassadorsPremined[ambassadorsPrerequisite[msg.sender]] && _incomingEthereum <= ambassadorsMaxPremine[msg.sender]) || (now >= startTime - 10 minutes && !ambassadorsPremined[msg.sender] && _incomingEthereum <= ambassadorsMaxPremine[msg.sender]) ); if (now < startTime) { ambassadorsPremined[msg.sender] = true; } address _customerAddress = msg.sender; uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100); uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100); uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus); uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends); uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum); require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_); if ( _referredBy != 0x0000000000000000000000000000000000000000 && _referredBy != _customerAddress && tokenBalanceLedger_[_referredBy] >= stakingRequirement ) { referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus); } else { _dividends = SafeMath.add(_dividends, _referralBonus); } tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens); tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens); moonIncContract.handleProductionIncrease.value(_dividends)(_customerAddress, _amountOfTokens * cookieProductionMultiplier); onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice()); return _amountOfTokens; }",
        "vulnerability": "Potential denial of service",
        "reason": "The `purchaseTokens` function has a strict limit on the amount of Ethereum that can be sent in (`_incomingEthereum <= 1 finney`). This can be exploited to prevent legitimate users from purchasing tokens by flooding the contract with transactions containing the maximum allowed value, causing the contract to reach its gas limit and leading to a denial of service.",
        "file_name": "0x025cd28d7ef83e1c2ffe511d5f9290d54ba5dcf0.sol"
    }
]