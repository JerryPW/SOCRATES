yUSDC.withdraw: GPTScan analysis start 
Prompt:
Given the following smart contract code, answer the questions below and organize the result in a json format like {"1": "Yes" or "No"}.
"1": Does it "have an external call"?

  function withdraw(uint256 _shares)
      external
      nonReentrant
      noContract
  {
      require(_shares > 0, "withdraw must be greater than 0");
      uint256 ibalance = balanceOf(msg.sender);
      require(_shares <= ibalance, "insufficient balance");
      
      pool = _calcPoolValueInToken();
      
      uint256 generatedYelds = getGeneratedYelds();
      
      uint256 stablecoinsToWithdraw = (pool.mul(_shares)).div(_totalSupply);
      yeldHoldingRequirement(stablecoinsToWithdraw);
      _balances[msg.sender] = _balances[msg.sender].sub(_shares, "redeem amount exceeds balance");
      _totalSupply = _totalSupply.sub(_shares);
      emit Transfer(msg.sender, address(0), _shares);
      uint256 b = IERC20(token).balanceOf(address(this));
      if (b < stablecoinsToWithdraw) {
        _withdrawSome(stablecoinsToWithdraw.sub(b));
      }


      
      
      uint256 totalPercentage = percentageRetirementYield.add(percentageDevTreasury).add(percentageBuyBurn);
      uint256 combined = stablecoinsToWithdraw.mul(totalPercentage).div(1e20);
      depositBlockStarts[msg.sender] = block.number;
      if (stablecoinsToWithdraw > depositAmount[msg.sender]) {
        depositAmount[msg.sender] = 0;
      } else {
        depositAmount[msg.sender] = depositAmount[msg.sender].sub(stablecoinsToWithdraw);
      }
      yeldToken.transfer(msg.sender, generatedYelds);
      
      
      uint256 stakingProfits = usdcToETH(combined);
      uint256 tokensAlreadyBurned = yeldToken.balanceOf(address(0));
      uint256 devTreasuryAmount = stakingProfits.mul(uint256(100e18).mul(percentageDevTreasury).div(totalPercentage)).div(100e18);
      if (tokensAlreadyBurned < maximumTokensToBurn) {
        uint256 ethToSwap = stakingProfits.mul(uint256(100e18).mul(percentageBuyBurn).div(totalPercentage)).div(100e18);
        buyNBurn(ethToSwap);
        uint256 retirementYeld = stakingProfits.mul(uint256(100e18).mul(percentageRetirementYield).div(totalPercentage)).div(100e18);
        retirementYeldTreasury.transfer(retirementYeld);
      } else {
        uint256 retirementYeld = stakingProfits.sub(devTreasuryAmount);
        retirementYeldTreasury.transfer(retirementYeld);
      }
      (bool success, ) = devTreasury.call.value(devTreasuryAmount)("");
      require(success, "Dev treasury transfer failed");
      IERC20(token).transfer(msg.sender, stablecoinsToWithdraw.sub(combined));
      

      pool = _calcPoolValueInToken();
      rebalance();
  }
Response:
{"1": "Yes"}
--------------------------------------------------
Prompt:
Does the following smart contract code "have an external call and followed by any state changes"? Answer only "Yes" or "No".

  function withdraw(uint256 _shares)
      external
      nonReentrant
      noContract
  {
      require(_shares > 0, "withdraw must be greater than 0");
      uint256 ibalance = balanceOf(msg.sender);
      require(_shares <= ibalance, "insufficient balance");
      
      pool = _calcPoolValueInToken();
      
      uint256 generatedYelds = getGeneratedYelds();
      
      uint256 stablecoinsToWithdraw = (pool.mul(_shares)).div(_totalSupply);
      yeldHoldingRequirement(stablecoinsToWithdraw);
      _balances[msg.sender] = _balances[msg.sender].sub(_shares, "redeem amount exceeds balance");
      _totalSupply = _totalSupply.sub(_shares);
      emit Transfer(msg.sender, address(0), _shares);
      uint256 b = IERC20(token).balanceOf(address(this));
      if (b < stablecoinsToWithdraw) {
        _withdrawSome(stablecoinsToWithdraw.sub(b));
      }


      
      
      uint256 totalPercentage = percentageRetirementYield.add(percentageDevTreasury).add(percentageBuyBurn);
      uint256 combined = stablecoinsToWithdraw.mul(totalPercentage).div(1e20);
      depositBlockStarts[msg.sender] = block.number;
      if (stablecoinsToWithdraw > depositAmount[msg.sender]) {
        depositAmount[msg.sender] = 0;
      } else {
        depositAmount[msg.sender] = depositAmount[msg.sender].sub(stablecoinsToWithdraw);
      }
      yeldToken.transfer(msg.sender, generatedYelds);
      
      
      uint256 stakingProfits = usdcToETH(combined);
      uint256 tokensAlreadyBurned = yeldToken.balanceOf(address(0));
      uint256 devTreasuryAmount = stakingProfits.mul(uint256(100e18).mul(percentageDevTreasury).div(totalPercentage)).div(100e18);
      if (tokensAlreadyBurned < maximumTokensToBurn) {
        uint256 ethToSwap = stakingProfits.mul(uint256(100e18).mul(percentageBuyBurn).div(totalPercentage)).div(100e18);
        buyNBurn(ethToSwap);
        uint256 retirementYeld = stakingProfits.mul(uint256(100e18).mul(percentageRetirementYield).div(totalPercentage)).div(100e18);
        retirementYeldTreasury.transfer(retirementYeld);
      } else {
        uint256 retirementYeld = stakingProfits.sub(devTreasuryAmount);
        retirementYeldTreasury.transfer(retirementYeld);
      }
      (bool success, ) = devTreasury.call.value(devTreasuryAmount)("");
      require(success, "Dev treasury transfer failed");
      IERC20(token).transfer(msg.sender, stablecoinsToWithdraw.sub(combined));
      

      pool = _calcPoolValueInToken();
      rebalance();
  }
    
Response:
No
--------------------------------------------------
