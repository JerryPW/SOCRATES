YZYVault.unstake: GPTScan analysis start 
Prompt:
Given the following smart contract code, answer the questions below and organize the result in a json format like {"1": "Yes" or "No"}.
"1": Does it "have an external call"?

    function unstake(uint256 amount) external returns (bool) {
        require(!isContract(_msgSender()), "Vault: Could not be contract.");
        StakerInfo storage staker = _stakers[_msgSender()];
        require(
            staker.stakedAmount > 0 && amount > 0 &&
            amount <= staker.stakedAmount, "Vault: Invalid amount to unstake."
        );
        claimYzyReward();
        claimSwapReward();
        if (_enabledLock &&
            _stakers[_msgSender()].lockedTo > 0 &&
            block.timestamp < _stakers[_msgSender()].lockedTo
        ) {
            uint256 feeAmount = amount.mul(uint256(_earlyUnstakeFee)).div(10000);
            _yzyETHV2Pair.transfer(_daoTreasury, feeAmount); 
            _yzyETHV2Pair.transfer(_msgSender(), amount.sub(feeAmount));
        } else {
           _yzyETHV2Pair.transfer(_msgSender(), amount);
        }
        staker.stakedAmount = staker.stakedAmount.sub(amount);
        emit Unstaked(_msgSender(), amount);
        return _sendLotteryAmount();
    }
Response:
{"1": "Yes"}
--------------------------------------------------
Prompt:
Does the following smart contract code "have an external call and followed by any state changes"? Answer only "Yes" or "No".

    function unstake(uint256 amount) external returns (bool) {
        require(!isContract(_msgSender()), "Vault: Could not be contract.");
        StakerInfo storage staker = _stakers[_msgSender()];
        require(
            staker.stakedAmount > 0 && amount > 0 &&
            amount <= staker.stakedAmount, "Vault: Invalid amount to unstake."
        );
        claimYzyReward();
        claimSwapReward();
        if (_enabledLock &&
            _stakers[_msgSender()].lockedTo > 0 &&
            block.timestamp < _stakers[_msgSender()].lockedTo
        ) {
            uint256 feeAmount = amount.mul(uint256(_earlyUnstakeFee)).div(10000);
            _yzyETHV2Pair.transfer(_daoTreasury, feeAmount); 
            _yzyETHV2Pair.transfer(_msgSender(), amount.sub(feeAmount));
        } else {
           _yzyETHV2Pair.transfer(_msgSender(), amount);
        }
        staker.stakedAmount = staker.stakedAmount.sub(amount);
        emit Unstaked(_msgSender(), amount);
        return _sendLotteryAmount();
    }
    
Response:
No
--------------------------------------------------
