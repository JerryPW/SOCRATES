JINJAINU.ContractTransfer: GPTScan analysis start 
Prompt:
Given the following smart contract code, answer the questions below and organize the result in a json format like {"1": "Yes" or "No"}.
"1": Does it "have an external call"?

    function ContractTransfer(address from, address to, uint256 amount) internal {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "ERC20: Transfer amount must be greater than zero");
        require(!_Bot[from], "ERC20: Can not transfer from BOT");
        if(!active){
            require(_TaxExclude[from] || _TaxExclude[to], "ERC20: Trading Is Not active!"); }
        if (maxWalletOn == true && ! _MaxExclude[to]) {
            require(balanceOf(to).add(amount) <= _MaxWallet, "ERC20: Max amount of tokens for wallet reached"); }
        if(actions){
            if (from != owner() && to != owner() && to != address(0) && to != DEAD && to != uniV2Pair) {
                for (uint x = 0; x < 1; x++) {
                    if(block.number == LiveBlock.add(x)) {
                        _Sniper[to] = true; }}}}
        uint256 totalTokensToSwap = liquidityTokens.add(marketingTokens);
        uint256 contractTokenBalance = balanceOf(address(this));
        bool overMinimumTokenBalance = contractTokenBalance >= _MinTS;
        if (!isal && sals && balanceOf(uniV2Pair) > 0 && totalTokensToSwap > 0 &&
            !_TaxExclude[to] && !_TaxExclude[from] && to == uniV2Pair && overMinimumTokenBalance) {
            taxTokenSwap(); }
        if (_TaxExclude[from] || _TaxExclude[to]) {
            marketingTax = 0; treasuryTax = 0; liquidityTax = 0;
            tDivider = marketingTax.add(treasuryTax).add(liquidityTax);
        } else {
            if (from == uniV2Pair) {
                marketingTax = taxBuyMarketing;
                treasuryTax = taxBuyTreasury;
                liquidityTax = taxBuyLiquidity;
                tDivider = taxBuyMarketing.add(taxBuyTreasury).add(taxBuyLiquidity);
            }else if (to == uniV2Pair) {
                marketingTax = taxSellMarketing;
                treasuryTax = taxSellTreasury;
                liquidityTax = taxSellLiquidity;
                tDivider = taxSellMarketing.add(taxSellTreasury).add(taxSellLiquidity);
                if(_Sniper[from] && EndSniperPen >= block.timestamp){
                    marketingTax = 95; treasuryTax = 0; liquidityTax = 0;
                    tDivider = marketingTax.add(treasuryTax).add(liquidityTax);
                }
            }else {
                require(!_Sniper[from] || EndSniperPen <= block.timestamp, "ERC20: Snipers can not transfer till penalty time is over");
                marketingTax = 0; treasuryTax = 0; liquidityTax = 0; } }
        tokenTransfer(from, to, amount);
    }
Response:
{"1": "No"}
--------------------------------------------------
