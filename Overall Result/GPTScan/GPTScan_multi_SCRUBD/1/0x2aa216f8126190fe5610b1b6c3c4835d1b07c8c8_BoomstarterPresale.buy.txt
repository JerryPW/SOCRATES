BoomstarterPresale.buy: GPTScan analysis start 
Prompt:
Given the following smart contract code, answer the questions below and organize the result in a json format like {"1": "Yes" or "No"}.
"1": Does it "have an external call"?

    function buy()
        public
        payable
        nonReentrant
        onlyIfSaleIsActive
        checkLimitsAndDates
    {
        // don't allow to buy anything if price change was too long ago
        // effectively enforcing a sale pause
        require( !priceExpired() );
        address investor = msg.sender;
        uint256 payment = msg.value;
        require((payment.mul(m_ETHPriceInCents)).div(1 ether) >= c_MinInvestmentInCents);

        /**
         * calculate amount based on ETH/USD rate
         * for example 2e17 * 36900 / 30 = 246 * 1e18
         * 0.2 eth buys 246 tokens if Ether price is $369 and token price is 30 cents
         */
        uint tokenAmount;
        // either hard cap or the amount where prices change
        uint cap;
        // price of the batch of token bought
        uint centsPerToken;
        if (m_currentTokensSold < c_priceRiseTokenAmount) {
            centsPerToken = c_centsPerTokenFirst;
            // don't let price rise happen during this transaction - cap at price change value
            cap = c_priceRiseTokenAmount;
        } else {
            centsPerToken = c_centsPerTokenSecond;
            // capped by the presale cap itself
            cap = c_maximumTokensSold;
        }

        // amount that can be bought depending on the price
        tokenAmount = payment.mul(m_ETHPriceInCents).div(centsPerToken);

        // number of tokens available before the cap is reached
        uint maxTokensAllowed = cap.sub(m_currentTokensSold);

        // if amount of tokens we can buy is more than the amount available
        if (tokenAmount > maxTokensAllowed) {
            // price of 1 full token in ether-wei
            // example 30 * 1e18 / 36900 = 0.081 * 1e18 = 0.081 eth
            uint ethPerToken = centsPerToken.mul(1 ether).div(m_ETHPriceInCents);
            // change amount to maximum allowed
            tokenAmount = maxTokensAllowed;
            payment = ethPerToken.mul(tokenAmount).div(1 ether);
        }

        m_currentTokensSold = m_currentTokensSold.add(tokenAmount);

        // send ether to external wallet
        m_beneficiary.transfer(payment);

        m_token.transfer(investor, tokenAmount);

        uint change = msg.value.sub(payment);
        if (change > 0)
            investor.transfer(change);

        FundTransfer(investor, payment, true);
    }
Response:
{"1": "Yes"}
--------------------------------------------------
Prompt:
Does the following smart contract code "have an external call and followed by any state changes"? Answer only "Yes" or "No".

    function buy()
        public
        payable
        nonReentrant
        onlyIfSaleIsActive
        checkLimitsAndDates
    {
        // don't allow to buy anything if price change was too long ago
        // effectively enforcing a sale pause
        require( !priceExpired() );
        address investor = msg.sender;
        uint256 payment = msg.value;
        require((payment.mul(m_ETHPriceInCents)).div(1 ether) >= c_MinInvestmentInCents);

        /**
         * calculate amount based on ETH/USD rate
         * for example 2e17 * 36900 / 30 = 246 * 1e18
         * 0.2 eth buys 246 tokens if Ether price is $369 and token price is 30 cents
         */
        uint tokenAmount;
        // either hard cap or the amount where prices change
        uint cap;
        // price of the batch of token bought
        uint centsPerToken;
        if (m_currentTokensSold < c_priceRiseTokenAmount) {
            centsPerToken = c_centsPerTokenFirst;
            // don't let price rise happen during this transaction - cap at price change value
            cap = c_priceRiseTokenAmount;
        } else {
            centsPerToken = c_centsPerTokenSecond;
            // capped by the presale cap itself
            cap = c_maximumTokensSold;
        }

        // amount that can be bought depending on the price
        tokenAmount = payment.mul(m_ETHPriceInCents).div(centsPerToken);

        // number of tokens available before the cap is reached
        uint maxTokensAllowed = cap.sub(m_currentTokensSold);

        // if amount of tokens we can buy is more than the amount available
        if (tokenAmount > maxTokensAllowed) {
            // price of 1 full token in ether-wei
            // example 30 * 1e18 / 36900 = 0.081 * 1e18 = 0.081 eth
            uint ethPerToken = centsPerToken.mul(1 ether).div(m_ETHPriceInCents);
            // change amount to maximum allowed
            tokenAmount = maxTokensAllowed;
            payment = ethPerToken.mul(tokenAmount).div(1 ether);
        }

        m_currentTokensSold = m_currentTokensSold.add(tokenAmount);

        // send ether to external wallet
        m_beneficiary.transfer(payment);

        m_token.transfer(investor, tokenAmount);

        uint change = msg.value.sub(payment);
        if (change > 0)
            investor.transfer(change);

        FundTransfer(investor, payment, true);
    }
    
Response:
No
--------------------------------------------------
