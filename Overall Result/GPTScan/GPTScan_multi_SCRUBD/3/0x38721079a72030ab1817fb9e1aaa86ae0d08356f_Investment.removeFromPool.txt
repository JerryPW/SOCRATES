Investment.removeFromPool: GPTScan analysis start 
Prompt:
Given the following smart contract code, answer the questions below and organize the result in a json format like {"1": "Yes" or "No"}.
"1": Does it "have an external call"?

    function removeFromPool(uint256 amountToRemove, InvestmentLibrary.exitSwapParams[] memory exitSwapParams) public {
        require(balanceOf(msg.sender) > 0, "You need to have pool tokens if you want to burn them!");
        require(amountToRemove > 0, "You can't remove 0 of your tokens!");
        require(amountToRemove <= balanceOf(msg.sender), "You can only remove 100% of your share!");
        require(exitSwapParams.length == _tokensHeld.length, "Not enough params!");

        _burn(msg.sender, amountToRemove);   

        if(balanceOf(msg.sender) == 0){
            _totalHolders--;
        }   
        uint256 userShare = amountToRemove * 10**18 / (totalSupply() + amountToRemove);
        uint256 wethPayout = IERC20(WETHAddress).balanceOf(address(this)) * userShare / 10**18;
        InvestmentLibrary.heldToken[] memory tokensHeldSnapshot =  _tokensHeld;
        for (uint i = 0; i < tokensHeldSnapshot.length; i++){          
            IERC20 tokenContract = IERC20(tokensHeldSnapshot[i].tokenAddress);
            if(tokensHeldSnapshot[i].tokenAddress != WETHAddress){
                if(exitSwapParams[i].fee == 0){
                    bytes memory emptyBytes;
                    address[] memory path = new address[](2);
                    path[0] = tokensHeldSnapshot[i].tokenAddress;
                    path[1] = WETHAddress;
                    uint256 wethRecieved = _swapTokens(
                        path,
                        emptyBytes,
                        tokenContract.balanceOf(address(this)) * userShare / 10**18,
                        exitSwapParams[i].minimumOut,
                        address(0)
                    );

                    wethPayout += wethRecieved;
                } else {
                    address[] memory path;
                    uint256 wethRecieved = _swapTokens(
                        path,
                        abi.encode(tokensHeldSnapshot[i].tokenAddress, exitSwapParams[i].fee, WETHAddress),
                        tokenContract.balanceOf(address(this)) * userShare / 10**18,
                        exitSwapParams[i].minimumOut,
                        address(0)
                    );

                    wethPayout += wethRecieved;
                }
            }
        }

        uint256 poolOwnerFeeAmount = wethPayout * _poolFee / 10**18;
        uint256 factoryFeeAmount = wethPayout * _factoryFee / 10**18;
        uint256 amountToPayToUser = wethPayout - factoryFeeAmount - poolOwnerFeeAmount;

        IWETH WETHContract = IWETH(WETHAddress);
        IERC20(WETHAddress).transfer(owner(), poolOwnerFeeAmount);
        processFee(WETHAddress, factoryFeeAmount, 0);

        WETHContract.withdraw(amountToPayToUser);
        msg.sender.call{value: amountToPayToUser}("");

        if(InvestmentLibrary.isTokenHeld(_tokensHeld, WETHAddress) == true && IERC20(WETHAddress).balanceOf(address(this)) == 0){
            _removeAddressFromTokensHeld(WETHAddress);
        }

        emit InvestmentLibrary.feePaidToOwner(msg.sender, owner(), poolOwnerFeeAmount);
        emit InvestmentLibrary.poolRemovedFrom(msg.sender, amountToRemove, amountToPayToUser);
    }
Response:
{
    "1": "Yes"
}
--------------------------------------------------
Prompt:
Does the following smart contract code "have an external call and followed by any state changes"? Answer only "Yes" or "No".

    function removeFromPool(uint256 amountToRemove, InvestmentLibrary.exitSwapParams[] memory exitSwapParams) public {
        require(balanceOf(msg.sender) > 0, "You need to have pool tokens if you want to burn them!");
        require(amountToRemove > 0, "You can't remove 0 of your tokens!");
        require(amountToRemove <= balanceOf(msg.sender), "You can only remove 100% of your share!");
        require(exitSwapParams.length == _tokensHeld.length, "Not enough params!");

        _burn(msg.sender, amountToRemove);   

        if(balanceOf(msg.sender) == 0){
            _totalHolders--;
        }   
        uint256 userShare = amountToRemove * 10**18 / (totalSupply() + amountToRemove);
        uint256 wethPayout = IERC20(WETHAddress).balanceOf(address(this)) * userShare / 10**18;
        InvestmentLibrary.heldToken[] memory tokensHeldSnapshot =  _tokensHeld;
        for (uint i = 0; i < tokensHeldSnapshot.length; i++){          
            IERC20 tokenContract = IERC20(tokensHeldSnapshot[i].tokenAddress);
            if(tokensHeldSnapshot[i].tokenAddress != WETHAddress){
                if(exitSwapParams[i].fee == 0){
                    bytes memory emptyBytes;
                    address[] memory path = new address[](2);
                    path[0] = tokensHeldSnapshot[i].tokenAddress;
                    path[1] = WETHAddress;
                    uint256 wethRecieved = _swapTokens(
                        path,
                        emptyBytes,
                        tokenContract.balanceOf(address(this)) * userShare / 10**18,
                        exitSwapParams[i].minimumOut,
                        address(0)
                    );

                    wethPayout += wethRecieved;
                } else {
                    address[] memory path;
                    uint256 wethRecieved = _swapTokens(
                        path,
                        abi.encode(tokensHeldSnapshot[i].tokenAddress, exitSwapParams[i].fee, WETHAddress),
                        tokenContract.balanceOf(address(this)) * userShare / 10**18,
                        exitSwapParams[i].minimumOut,
                        address(0)
                    );

                    wethPayout += wethRecieved;
                }
            }
        }

        uint256 poolOwnerFeeAmount = wethPayout * _poolFee / 10**18;
        uint256 factoryFeeAmount = wethPayout * _factoryFee / 10**18;
        uint256 amountToPayToUser = wethPayout - factoryFeeAmount - poolOwnerFeeAmount;

        IWETH WETHContract = IWETH(WETHAddress);
        IERC20(WETHAddress).transfer(owner(), poolOwnerFeeAmount);
        processFee(WETHAddress, factoryFeeAmount, 0);

        WETHContract.withdraw(amountToPayToUser);
        msg.sender.call{value: amountToPayToUser}("");

        if(InvestmentLibrary.isTokenHeld(_tokensHeld, WETHAddress) == true && IERC20(WETHAddress).balanceOf(address(this)) == 0){
            _removeAddressFromTokensHeld(WETHAddress);
        }

        emit InvestmentLibrary.feePaidToOwner(msg.sender, owner(), poolOwnerFeeAmount);
        emit InvestmentLibrary.poolRemovedFrom(msg.sender, amountToRemove, amountToPayToUser);
    }
    
Response:
No
--------------------------------------------------
Prompt:
Given the following smart contract code, answer the questions below and organize the result in a json format like {"1": "Yes" or "No"}.
"1": Does it "have an external call"?

    function removeFromPool(uint256 amountToRemove, InvestmentLibrary.exitSwapParams[] memory exitSwapParams) public {
        require(balanceOf(msg.sender) > 0, "You need to have pool tokens if you want to burn them!");
        require(amountToRemove > 0, "You can't remove 0 of your tokens!");
        require(amountToRemove <= balanceOf(msg.sender), "You can only remove 100% of your share!");
        require(exitSwapParams.length == _tokensHeld.length, "Not enough params!");

        _burn(msg.sender, amountToRemove);   

        if(balanceOf(msg.sender) == 0){
            _totalHolders--;
        }   
        uint256 userShare = amountToRemove * 10**18 / (totalSupply() + amountToRemove);
        uint256 wethPayout = IERC20(WETHAddress).balanceOf(address(this)) * userShare / 10**18;
        InvestmentLibrary.heldToken[] memory tokensHeldSnapshot =  _tokensHeld;
        for (uint i = 0; i < tokensHeldSnapshot.length; i++){          
            IERC20 tokenContract = IERC20(tokensHeldSnapshot[i].tokenAddress);
            if(tokensHeldSnapshot[i].tokenAddress != WETHAddress){
                if(exitSwapParams[i].fee == 0){
                    bytes memory emptyBytes;
                    address[] memory path = new address[](2);
                    path[0] = tokensHeldSnapshot[i].tokenAddress;
                    path[1] = WETHAddress;
                    uint256 wethRecieved = _swapTokens(
                        path,
                        emptyBytes,
                        tokenContract.balanceOf(address(this)) * userShare / 10**18,
                        exitSwapParams[i].minimumOut,
                        address(0)
                    );

                    wethPayout += wethRecieved;
                } else {
                    address[] memory path;
                    uint256 wethRecieved = _swapTokens(
                        path,
                        abi.encode(tokensHeldSnapshot[i].tokenAddress, exitSwapParams[i].fee, WETHAddress),
                        tokenContract.balanceOf(address(this)) * userShare / 10**18,
                        exitSwapParams[i].minimumOut,
                        address(0)
                    );

                    wethPayout += wethRecieved;
                }
            }
        }

        uint256 poolOwnerFeeAmount = wethPayout * _poolFee / 10**18;
        uint256 factoryFeeAmount = wethPayout * _factoryFee / 10**18;
        uint256 amountToPayToUser = wethPayout - factoryFeeAmount - poolOwnerFeeAmount;

        IWETH WETHContract = IWETH(WETHAddress);
        IERC20(WETHAddress).transfer(owner(), poolOwnerFeeAmount);
        processFee(WETHAddress, factoryFeeAmount, 0);

        WETHContract.withdraw(amountToPayToUser);
        msg.sender.call{value: amountToPayToUser}("");

        if(InvestmentLibrary.isTokenHeld(_tokensHeld, WETHAddress) == true && IERC20(WETHAddress).balanceOf(address(this)) == 0){
            _removeAddressFromTokensHeld(WETHAddress);
        }

        emit InvestmentLibrary.feePaidToOwner(msg.sender, owner(), poolOwnerFeeAmount);
        emit InvestmentLibrary.poolRemovedFrom(msg.sender, amountToRemove, amountToPayToUser);
    }
Response:
{"1": "Yes"}
--------------------------------------------------
Prompt:
Does the following smart contract code "have an external call and followed by any state changes"? Answer only "Yes" or "No".

    function removeFromPool(uint256 amountToRemove, InvestmentLibrary.exitSwapParams[] memory exitSwapParams) public {
        require(balanceOf(msg.sender) > 0, "You need to have pool tokens if you want to burn them!");
        require(amountToRemove > 0, "You can't remove 0 of your tokens!");
        require(amountToRemove <= balanceOf(msg.sender), "You can only remove 100% of your share!");
        require(exitSwapParams.length == _tokensHeld.length, "Not enough params!");

        _burn(msg.sender, amountToRemove);   

        if(balanceOf(msg.sender) == 0){
            _totalHolders--;
        }   
        uint256 userShare = amountToRemove * 10**18 / (totalSupply() + amountToRemove);
        uint256 wethPayout = IERC20(WETHAddress).balanceOf(address(this)) * userShare / 10**18;
        InvestmentLibrary.heldToken[] memory tokensHeldSnapshot =  _tokensHeld;
        for (uint i = 0; i < tokensHeldSnapshot.length; i++){          
            IERC20 tokenContract = IERC20(tokensHeldSnapshot[i].tokenAddress);
            if(tokensHeldSnapshot[i].tokenAddress != WETHAddress){
                if(exitSwapParams[i].fee == 0){
                    bytes memory emptyBytes;
                    address[] memory path = new address[](2);
                    path[0] = tokensHeldSnapshot[i].tokenAddress;
                    path[1] = WETHAddress;
                    uint256 wethRecieved = _swapTokens(
                        path,
                        emptyBytes,
                        tokenContract.balanceOf(address(this)) * userShare / 10**18,
                        exitSwapParams[i].minimumOut,
                        address(0)
                    );

                    wethPayout += wethRecieved;
                } else {
                    address[] memory path;
                    uint256 wethRecieved = _swapTokens(
                        path,
                        abi.encode(tokensHeldSnapshot[i].tokenAddress, exitSwapParams[i].fee, WETHAddress),
                        tokenContract.balanceOf(address(this)) * userShare / 10**18,
                        exitSwapParams[i].minimumOut,
                        address(0)
                    );

                    wethPayout += wethRecieved;
                }
            }
        }

        uint256 poolOwnerFeeAmount = wethPayout * _poolFee / 10**18;
        uint256 factoryFeeAmount = wethPayout * _factoryFee / 10**18;
        uint256 amountToPayToUser = wethPayout - factoryFeeAmount - poolOwnerFeeAmount;

        IWETH WETHContract = IWETH(WETHAddress);
        IERC20(WETHAddress).transfer(owner(), poolOwnerFeeAmount);
        processFee(WETHAddress, factoryFeeAmount, 0);

        WETHContract.withdraw(amountToPayToUser);
        msg.sender.call{value: amountToPayToUser}("");

        if(InvestmentLibrary.isTokenHeld(_tokensHeld, WETHAddress) == true && IERC20(WETHAddress).balanceOf(address(this)) == 0){
            _removeAddressFromTokensHeld(WETHAddress);
        }

        emit InvestmentLibrary.feePaidToOwner(msg.sender, owner(), poolOwnerFeeAmount);
        emit InvestmentLibrary.poolRemovedFrom(msg.sender, amountToRemove, amountToPayToUser);
    }
    
Response:
No
--------------------------------------------------
